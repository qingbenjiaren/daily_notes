设计模式借鉴了kafka的架构
rocket的性能为什么优于kafka
问题1：消息是如何投递的？？是否可以根据代码发现蛛丝马迹


rocketMQ启动：
先启动nameServer:注册
MQbroker:


不要使用docker容器安装有状态服务

消息发送流程：
	指定生产者组（组名）
	指定主题（topic），主题名称自定义
	发送消息内容
	
	默认创建4个队列
	3，3，2，2
	
	
	消息投递的负载均衡：
		
		
看源码：必须要有耐心
		一定要借助工具、UML/excel，否则看半天晕了，
		善于看接口方法，善于设计模式
		
		
Rocket源码，整(注意偷学方法)
	要看发送消息的负载均衡
	先看接口
		producer.send(Message msg,MessageQueueSelector selector)
		
		MessageQueueSelector
		
		//默认负载均衡算法
		tryToFindTopicPublishInfo(msg.getTopic());//根据topic名获取队列信息
		
		selectOneMessgaeQueue(topicPublish, lastBrokerName)//
		
		TopicPublishInfo#SelectOneMessageQueue//默认使用此负载均衡的方法
		
		Math.abs(index) % this.messageQueueList.size() // 得到的结果一定是队列的索引（角标）
		
		messageQueueList.get()根据索引，获取队列
	
		ThreadLocal线程隔离：用处，有状态
		
		
		//随机负载均衡算法
		直接取随机数，随机数的取值范围是队列长度
		
		//hash
		随便传个什么，然后取hashcode
		用hashcode模上队列长度
		
		调皮
		
		
		消息的消费：
			集群模式
			平均分配算法
			环形平均算法
			
		
			指定消费者组
			
			
		一个消费者组不能同时监听多个主题进行消费
		有些队列无法被消费
		
		探索：是什么原因导致这些队列无法被消费呢
		
		看一下是怎么做负载均衡的
		
		
		负载均衡算法：
			1、根据名称，把主题下的队列平均分配给消费者
			2、topicA主题：4队列平均分配给两个消费者，因此每一个消费者各分得两个队列
			3、topicB主题、4队列平均分配给两个消费者，因此每一个消费者各分得2个队列
			矛盾
			4个队列平均分配给2个消费者，第二个消费者监听的是另一个主题，因此分配给第二个消费者的
			队列无法被消费
	
		
		消费者源码：
			监听器设计模式：-------设计模式（掌握一些设计模式的相关知识）
				1、监听器
				2、事件源
				3、事件对象
			
			
			先拉取消息，再负载均衡
			
			
			老师加了注释的源码，一定要敲破脑袋研究清楚
			
			
			
			
			下节课：主要讲消息的存储
				刷盘策略
				顺序存储-------于kafka做对比
				随机存储
				顺序消息
				消息去重
				延迟消息
				消息可靠性 -----适用于所有消息中间件
				事务消息
				
				剩下的知识RocketMQ架构，和基本原理
			
			每一个老师对源码都是滚瓜烂熟。。。。。
			
			
			
			
			
安装：
	需要jar包在后台运行:nohup ./mqbroker