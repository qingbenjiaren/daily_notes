Nginx简介
	Nginx（engine x）是一个轻量级的，高性能的，基于http的，反向代理服务器，静态web服务器
	
	
	正向代理
	反向代理
	
	总结：
		正向代理的特点
			
			正向代理是对客户端的代理
			正向代理是架设在客户端的主机
			客户端再使用代理服务器时时知道其所要真正访问的服务器地址的
			
		反向代理的特点
		
			反向代理是对服务端的代理
			架设在服务端的主机
			客户端在使用代理服务器时好像是知道其所要访问的服务器真正的地址，但其实客户端是不知道的
			
	Nginx的特点
		高并发：一个nginx在不做任何设置的情况下（默认情况下），并发量可以达到1000，滴滴打车的平均qps为240多
		低消耗: 10000个非活跃连接，Nginx中仅小号2.5M的内存。DoS攻击，DDoS攻击
			信息安全的三要素：保密性，完整性，可用性。
			DoS攻击，DDoS攻击（消息系统的可用性，消耗系统的可用性）
			拿看似正常的请求，来使真正需要的请求没办法访问
		热部署：提供7*24消息不间断的服务，修改了配置文件也可以平滑重启
		高可用：Nginx中由一个主进程，由多个worker进程
		高扩展：C语言扩展模块，与LUA脚本扩展
		
	Nginx安装前准备
	
	Nginx安装
	
	Nginx命令
		nginx -?
	Nginx核心配置
		性能调优
			零拷贝：
				零拷贝指的是，从一个存储区域到另一个存储区域的copy任务没有CPU（内核）参与（ALU，ArithmeticLogicUnit，算术逻辑单元）。零拷贝通常用于网络文件传输。
				减少CPU消耗和内存带宽占用，减少用户空间（用户可操作的内存缓存区域）与CPU内核空间（CPU可操作的内存缓存区域及寄存器缓存）的拷贝过程，减少用户上下文（用户环境）
				与CPU内核（CPU环境）上下文的切换，提高系统效率。
				零拷贝主要借助DMA（Direct Memory Access）来完成,直接内存访问
				
			传统拷贝方式
				下面均以“将一个硬盘中的文件通过网络发送出去”的过程为例，来详细分析不同拷贝方式的实现细节
				首先通过应用程序的read()方法将文件从硬盘读取出来，然后再调用send（）方法将文件发送出去
				看老雷的动画：
			
			零拷贝
			
			gather拷贝
			
			mmap拷贝
			
		
			多路复用器
				要理解select、poll与epoll多路复用器的工作原理，就需要首先了解什么是多路复用器。而要了解什么是多路复用器，就需要首先了解什么是多路复用器。而要了解什么是多路复用器，
				就需要先了解什么是“多进程/多线程连接处理模型”
				
				任何请求都是先IP（主机）在端口（应用程序）
				
				看图，processon
			select
				不足：轮询，占用CPU资源，做无用功，因为内核进程大部分都是非就绪状态
					  数组实现就绪队列，不适合搞并发
					  复制:没有用零拷贝
			poll
				和select类似，但是它的就绪状态它的就绪队列是用链表实现的，长度没有限制。（但是，有ulimit限制，看ulimit -u）
				但是，解决的仅仅是高并发的问题，没有解决轮询的问题
			epoll
				epoll多路复用是对select和poll的增强与改进，不再采用轮询了，采用的是回调方式实现对内核进程状态的获取：
				一旦内核进程就绪，其就会回调epoll多路复用器，进入到多路复用器
				
				复制的问题，应用程序所使用的数据，也不再从内核空间拷贝到用户空间，而是使用了mmap零拷贝，大大降低了系统开销
				
				当内核进程就绪信息通知了epoll多路复用器后，并不是马上对器进行处理，将其立即存放到就绪队列，而是根据不同的处理模型，
				由不同的处理方式，两种模型：LT模型和ET模型
				
					LT：level trigered，水平触发模型，若没有将其存放到就绪队列，其就会一直重试，知道加入到就绪队列，或取消了本次请求。，效率低，请求不丢失
					ET: 就告诉你一次，效率高，存在请求丢失的情况
			
			以上三种多路复用器的应用场景：
				如果某个站点的连接大多数都是活跃连接：如果采用的poll轮询方式，内核进程都属于就绪状态，这时候采用轮询的效率比回调的要高
			
		Nginx的并发处理机制
				一般情况下并发处理机制由三种：多进程，多线程，与异步机制。Nginx对于并发的处理同时采用了三种机制。
				当然，其异步机制使用的是异步非阻塞的方式
				我们知道Nginx的进程分为两类，master进程与worker进程。每个master进程可以生成多个worker进程，所以其是多进程的
				master进程负责worker进程的生命周期，接受外部命令，解析perl脚本等。
				worker进程用于接受和处理客户端的请求
				每个worker进程可以同时处理多个用户请求，每个用户请求会由一个线程来处理，所以其是多线程的。
				
				那么如何解释其“异步非阻塞”并发处理机制呢？
				非阻塞：
					当worker进程接受到请求之后，会马上调用后端服务器，若没有得到请求结果，不马上处理其他请求，
					只有由请求被后端服务器处理完了，后端服务器回调epoll多路复用器，epoll再对worker进程进行通知
					worker进程则对正在处理的请求挂起，把请求结果返回客户端，再继续执行当前请求
					
		全局模式下的调优
				配置文件设置进程/设置线程
				
				worker_processes，工作进程，一般设置为CPU内核数量，或内核数量的整数倍
				不过需要注意的是，可以设置为auto
				
				worker_cpu_affinity 01 10(worker进程和内核的关系)（该表达式为第一个进程使用1号内核，第二个进程使用2号内核）
				看劳累的PPT
				
				
				worker_rlimit_nofile 65535 一个worker最多可以处理多少请求，默认值与当前linux系统可以打开的最大文件描述符数量相同ulimit -n
				ulimit -n 默认设置是1024，可以修改ulimit -n 65535
		events 模块下的调优
				worker_connections 1024
				设置每一个worker进程所能处理的并发连接数，值不能大于worker_rlimit_nofile
				
				accept_mutex on
				有空闲worker时，这些空闲worker会被放置在一个阻塞队列，等待新连接的到来。新来的连接如何分配给这些空闲worker
					on ：默认值，串行方式处理，新连接到来会唤醒阻塞队列的对手worker，只会唤醒一个worker
					off: 表示当前一个新连接到达时，所有的worker都会唤醒，不过只有一个worker能获取新连接，其他的worker进程会重新进入阻塞状态
					这时惊群现象。在这里惊群对nginx的影响不大，应为nginxworker进程不会太多。
					举例：一个鸡棚有100只鸡，现在我有一把米，怎么喂给鸡群
						：第一种方式：抓一只鸡，喂一颗米。。。。。。井然有序
						：第二种方式：撒到鸡群中，自己抢。。。。。。无序，竞争
						到底应该使用哪一种方式，应该看这把米有多少，鸡有多少
						
				accept_mutex_delay 500ms
					该属性的使用前提是accept_mutex设置为on。该属性用于设置队首worker尝试获取新请求的时间间隔。默认设置为500毫秒
					
				multi_accept on
					当所有队列都属于工作状态时又有多个新的连接到来，该怎么分配
					off：会逐个拿出新连接按照负载均衡，将其分配给相应的worker。其会将多个请求分配给多个worker
					on:系统会实时的统计出各个worker当前正在处理的连接个数，然后会按照每个worker正在处理的连接个数，将这些新的连接一次性分配给
					当前连接数量最少的worker，其会将多个个请求分配一个worker
				
				use epoll
					设置worker与后端服务器连接的处理方式。Nginx会自动选择适合当前系统的最高效的方式。当然，也可以使用use
					指令明确指定所要使用的连接处理方式。取值有以下几种: select | poll | epoll | rtsig | kqueue | /dev/poll
					
					select | poll | epoll
					
					rtsig	
						realtime signal，实时信号，Linux2.2.19+的搞笑连接处理方式。但是在Linux2.6版本后，不再支持该方式
						
					kqueue
						应用在BSD系统上的epoll
					
					/dev/poll
						Unix系统上使用的poll
						
			http模式下的调优
				非调优属性简介
					include mime.types
						把mime.types包含进来
					default_type application/octet-stream
						对于无扩展名的文件，默认其为application/octet-stream类型，Nginx会将其作为一个八进制流文件来处理
						
					sendfile on
						设置为on则开启Linux系统的零拷贝机制，否则不启动零拷贝。当然，开启后是否起作用，要看锁使用的系统版本。
					tcp_nopush on
						on：以单独的数据包形式发送Nginx的响应头信息，而真正的响应体数据会再以数据包的形式发送，这个数据包中就不包含相应头了
							如果数据量大，那么响应头数据就会使冗余数据，使用这种方式，就会避免大量的冗余数据（响应头），可以降低数据冗余度
							减少数据发送量。
						off：默认值，相应头信息包含在每一个相应体数据包中。
					
					tcp_nodelay on
						on:不设置数据发送缓存，即不推迟发送，适合传输小数据，无需缓存
						off:
					keepalive_timeout 60
						设置客户端与Nginx间所建立的长连接的生命超时时间，时间到达则连接自动关闭，单位秒
						这个值不能太大，因为有的浏览器最多支持60秒
					
					keepalive_requests 10000
						设置一个长连接最多可以发送的请求数，该值需要在真是环境下测试
					
					client_body_timeout 10
						设置客户端获取Nginx响应的超时时限，即一个请求从客户端发出到接收到Nginx的响应的最长时间间隔，若超时，本次请求失败
						一旦设置好，就会把这个值传递给客户端
				
				资源访问原理：
					资源访问：
						location /{
							root    html
							index   index.html index.htm;
						}
						location /ooo/xxx{			请求的uri	
							root    /opt;			uri的相对路径
							index   abc.log dufault.txt;
						}
					
				路径配置优先级：
					优先级规则有低到高
						普通匹配 < 长路径匹配 < 正则匹配 < 短路匹配 < 精确匹配
						
						普通匹配
						
				HTTP模式下的全局缓存的配置
					缓存配置
						Nginx具有很强大的缓存功能，可以对请求的response进行缓存，起到类似CDN的作用甚至比CDN更强大的功能
						
						http{}模块的缓存全局定义
						
						proxy_cache_path
							用于指定Nginx缓存的存放路径及相关配置
							
							/usr/local/nginx/cache 指定Nginx缓存的存放路径，可以是任意目录
							levels=1:2 在指定的缓存文件存放路径下采用两级目录进行管理，第一级目录使用一个字符命名，第二级目录使用两个字符
							
							keys_zone=mycache:10m 在内存中指定一块区域用于存放缓存的key，这样nginx就可以快速判断一个请求是否命中缓存
							存放的key cache的键值对，值为缓存的位置
							10M能存放8万个左右
							
							max_size=5g 用于设置缓存所占硬盘空间大小，LRU算法
							
							inactive=2h 若两个小时未使用，则清理
							
							use_temp_path=off，使用临时路径，若直接往缓存里写，是需要运算的（往哪里写），
							如果使用了临时目录，先放在临时目录，可以配临时目录大小，如果满了，则会一次性
							往缓存里写，也可以设置多少时间
							
						
						proxy_temp_path
							指定Nginx缓存的临时存放目录。若proxy_cache_path中的use_temp_path设置为了off
							则该属性可以不指定
						
				location模块下的缓存局部定义
						proxy_cache mycahe
						
						proxy_cache_key $host$request_uri  Nginx内置变量
						
						proxy_cache_bypass $arg_age
						指定是否越过缓存，即当前缓存中是否从缓存中获取
						
						proxy_cache_methods GET HEAD
						指定客户端请求的那些提交方法将被缓存，默认为GET与HEAD(Head不包含响应体，只需要知道某一个资源是否存在),但不缓存POST
						
						proxy_no_cache $aaa $bbb $ccc
						指定本次请求是否不做缓存，只要有一个不是0，就不对该请求的结果缓存
						
						proxy_cache_purge $ddd $eee $fff
						指定是否清楚缓存key
						
						proxy_cache_lock on
						指定是否采用互斥方式回源，类似redis的缓存击穿，分布式锁
						
						proxy_cache_lock_timeout 5s
						指定再次生产回源互斥锁的时限，若其中一个请求回源后，迟迟不归？
						
						proxy_cache_valid 5s
						对指定HTTP状态码的响应数据进行缓存，并指定缓存时间，默认指定的状态码为200,301，302
						自定义的话：思考，200设置短一些，500设置长一些
						
						proxy_cache_use_stale error timeout http_500
						
						设置启用托底缓存的条件，
						文件删了，回收站也清空了，也照样可以恢复，因为，只要电脑没有做其他操作，硬盘原来的位置
						还是存的这个文件，只不过，指向他的key被删了，这个文件将不会被找到，我们可以通过
						系统恢复来重新找到该文件，但是，如果这个位置的空间被其他文件覆盖了，则不能恢复了
						所以，卖手机卖电脑之前，要注意了
						
						expires 3m
						为请求的静态资源开启浏览器端的缓存
				
				Nginx日志管理及自动切割
					对于程序员，运维来说，日志非常的重要，通过日志可以查看到很多请求的访问信息，
					即异常信息.Nginx也提供了对日志的强大支持
					
					日志管理范围
						http{}：若请求时通过http协议访问的nginx，其就会将日志信息写入到日志文件
						server{}：若请求当前server{}模块，其就会写入日志
						localtion{}：若请求当前的localtion模块，就会把日志写入到日志文件
						
						log_format:
							$remote_addr：获取访问者的IP地址，若当前Nginx是反代服务器，则此变量获取到的是
								客户端的IP地址，若当前Nginx是静态代理服务器，则此变量获取到的是反代服务器的IP地址
							$http_x_forwarded_for:
							
							
							
						access_log
							access_log logs/access.log main buffer=64k
							三个参数
								第一个参数是日志的位置
								第二个是格式
								第三个是缓存
							
						error_log
							该指令用于指定错误日志的路径与文件名。需要注意以下几点：
 							其不能指定格式，因为其有默认格式。
							可以使用自己指定的错误日志文件，不过，将来的访问异常日志就不会再写入到默认的
							logs/error.log 文件中了。所以关于错误日志，一般使用默认的即可。
 							错误日志级别由低到高有：[debug | info | notice | warn | error | crit | alert | emerg]，默
							认为 error，级别越高记录的信息越少。
 							错误日志默认是开启的。关闭错误日志不是 error_log off，这样会将错误日志写到当前
							目录中名称为 off 的文件中。关闭错误日志的写法为 error_log /dev/null;
							
						open_log_file_cache
							该指令用于打开日志文件的缓存，将日志信息读取到缓存中，以加快日志解析系统对日志的访问。
							该功能默认为off
								max 最大可以打开的日志文件个数
								inactive与min_uses要联用：
								valid:缓存日志刷新时间
							
						favicon.ico问题的解决
						
							找一个图片.icp
							然后放到指定目录下，在配置文件里配路径
							
						日志的自动切割
							实现步骤
								创建切割的shell脚本文件
									脚本网上可以搜
								为该文件添加可执行权限
								
								向crontab中添加一个定时任务
								
								crontab是Linux中的一个定时任务文件，每一行都代表以项定时任务。每行由6个字段组成
								。。。。。。
						
						Nginx的静态代理
							Nginx静态代理是指，将所有静态资源，例如，css,js,html,jpg等资源存放到Nginx服务器
							而不存放在应用服务器tomcat中
							
							目录名拦截
								localtion ~.*(css|js|html)
									.代表任意字符,*代表任意个
							通过扩展名拦截
								location ~.*\.........
						页面压缩
							浏览器常见的压缩协议
								默认gizp
						
						