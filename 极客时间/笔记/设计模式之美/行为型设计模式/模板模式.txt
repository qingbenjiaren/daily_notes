

模板方法模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。
模板方法模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。


方法论：
	
	模板方法模式中定义流程的方法可以考虑使用final，目的是为了避免子类重写
	
	用抽象方法强迫子类去实现
	
	
	模板模式作用一：复用
		
		复用父类中模板方法的流程代码
		
		
		1、Java IO 类库中，有很多类的设计用到了模板模式，比如 InputStream、OutputStream、
		Reader、Writer。我们拿 InputStream 来举例说明一下。
		
		
		
			public abstract class InputStream implements Closeable {
			  //...省略其他代码...
			  
			  public int read(byte b[], int off, int len) throws IOException {
				if (b == null) {
				  throw new NullPointerException();
				} else if (off < 0 || len < 0 || len > b.length - off) {
				  throw new IndexOutOfBoundsException();
				} else if (len == 0) {
				  return 0;
				}

				int c = read();
				if (c == -1) {
				  return -1;
				}
				b[off] = (byte)c;

				int i = 1;
				try {
				  for (; i < len ; i++) {
					c = read();
					if (c == -1) {
					  break;
					}
					b[off + i] = (byte)c;
				  }
				} catch (IOException ee) {
				}
				return i;
			  }
			  
			  public abstract int read() throws IOException;
			}

			public class ByteArrayInputStream extends InputStream {
			  //...省略其他代码...
			  
			  @Override
			  public synchronized int read() {
				return (pos < count) ? (buf[pos++] & 0xff) : -1;
			  }
			}
			
		
		2、Java AbstractList
		
			在 Java AbstractList 类中，addAll() 函数可以看作模板方法，add() 是子类需要重写的方法，
			尽管没有声明为 abstract 的，但函数实现直接抛出了 UnsupportedOperationException 异常。
			前提是，如果子类不重写是不能使用的。
			
			
				public boolean addAll(int index, Collection<? extends E> c) {
					rangeCheckForAdd(index);
					boolean modified = false;
					for (E e : c) {
						add(index++, e);
						modified = true;
					}
					return modified;
				}

				public void add(int index, E element) {
					throw new UnsupportedOperationException();
				}
				
	模板模式作用二：扩展
		
		这里指的是框架的扩展性，模板模式常用在框架的开发中，让框架用户可以在不修改框架源码的情况下，
		定制化框架的功能。
		
		1.Java Servlet
			
			
			public class HelloServlet extends HttpServlet {
			  @Override
			  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
				this.doPost(req, resp);
			  }
			  
			  @Override
			  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
				resp.getWriter().write("Hello World.");
			  }
			}
	2.JUnit TestCase
	
		
		public abstract class TestCase extends Assert implements Test {
		  public void runBare() throws Throwable {
			Throwable exception = null;
			setUp();
			try {
			  runTest();
			} catch (Throwable running) {
			  exception = running;
			} finally {
			  try {
				tearDown();
			  } catch (Throwable tearingDown) {
				if (exception == null) exception = tearingDown;
			  }
			}
			if (exception != null) throw exception;
		  }
		  
		  /**
		  * Sets up the fixture, for example, open a network connection.
		  * This method is called before a test is executed.
		  */
		  protected void setUp() throws Exception {
		  }

		  /**
		  * Tears down the fixture, for example, close a network connection.
		  * This method is called after a test is executed.
		  */
		  protected void tearDown() throws Exception {
		  }
		}
		
	模板方法模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。
	模板方法模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤
	
	
	模板模式有两大作用：复用和扩展。
		复用指的是，所有的子类可以复用父类中提供的模板方法的代码。
		扩展指的是，框架通过模板模式提供功能扩展点，让框架用户可以在不修改框架源码的情况下，
		基于扩展点定制化框架的功能。
		
		
	
	还有另外一个技术概念，也能起到跟模板模式相同的作用，那就是回调（Callback）
	
	回调的原理、实现和应用，以及它跟模板模式的区别和联系。
	
		相对于普通的函数调用来说，回调是一种双向调用关系。A 类事先注册某个函数 F 到 B 类，
		A 类在调用 B 类的 P 函数的时候，B 类反过来调用 A 类注册给它的 F 函数。
		这里的 F 函数就是“回调函数”。A 调用 B，B 反过来又调用 A，这种调用机制就叫作“回调”。
		
		
		
			public interface ICallback {
			  void methodToCallback();
			}

			public class BClass {
			  public void process(ICallback callback) {
				//...
				callback.methodToCallback();
				//...
			  }
			}

			public class AClass {
			  public static void main(String[] args) {
				BClass b = new BClass();
				b.process(new ICallback() { //回调对象
				  @Override
				  public void methodToCallback() {
					System.out.println("Call back me.");
				  }
				});
			  }
			}
			
			
			除了回调函数之外，BClass 类的 process() 函数中的逻辑都可以复用。
			如果 ICallback、BClass 类是框架代码，AClass 是使用框架的客户端代码，
			我们可以通过 ICallback 定制 process() 函数，也就是说，框架因此具有了扩展的能力。
			
			回调可以分为同步回调和异步回调（或者延迟回调）。
			
			同步回调看起来更像模板模式，异步回调看起来更像观察者模式。
			
	
	应用举例一：JdbcTemplate
	
		Spring 提供了很多 Template 类，比如，JdbcTemplate、RedisTemplate、RestTemplate。
		
		尽管都叫作 xxxTemplate，但它们并非基于模板模式来实现的，而是基于回调来实现的，确切地说应该是同步回调。
		
		而同步回调从应用场景上很像模板模式，所以，在命名上，这些类使用 Template（模板）这个单词作为后缀。
		
		直接使用 JDBC 来编写操作数据库的代码，还是有点复杂的
			public class JdbcDemo {
			  public User queryUser(long id) {
				Connection conn = null;
				Statement stmt = null;
				try {
				  //1.加载驱动
				  Class.forName("com.mysql.jdbc.Driver");
				  conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "xzg", "xzg");

				  //2.创建statement类对象，用来执行SQL语句
				  stmt = conn.createStatement();

				  //3.ResultSet类，用来存放获取的结果集
				  String sql = "select * from user where id=" + id;
				  ResultSet resultSet = stmt.executeQuery(sql);

				  String eid = null, ename = null, price = null;

				  while (resultSet.next()) {
					User user = new User();
					user.setId(resultSet.getLong("id"));
					user.setName(resultSet.getString("name"));
					user.setTelephone(resultSet.getString("telephone"));
					return user;
				  }
				} catch (ClassNotFoundException e) {
				  // TODO: log...
				} catch (SQLException e) {
				  // TODO: log...
				} finally {
				  if (conn != null)
					try {
					  conn.close();
					} catch (SQLException e) {
					  // TODO: log...
					}
				  if (stmt != null)
					try {
					  stmt.close();
					} catch (SQLException e) {
					  // TODO: log...
					}
				}
				return null;
			  }

			}
			
			
			queryUser() 函数包含很多流程性质的代码，跟业务无关，
			比如，加载驱动、创建数据库连接、创建 statement、关闭连接、关闭 statement、处理异常。
			
			针对不同的 SQL 执行请求，这些流程性质的代码是相同的、可以复用的，我们不需要每次都重新敲一遍。
			
			针对这个问题，Spring 提供了 JdbcTemplate，对 JDBC 进一步封装，来简化数据库编程。
			
			使用 JdbcTemplate 查询用户信息，我们只需要编写跟这个业务有关的代码，其中包括，
			查询用户的 SQL 语句、查询结果与 User 对象之间的映射关系。
			
			用JdbcTemplate 重写了上面的例子
			
				public class JdbcTemplateDemo {
				  private JdbcTemplate jdbcTemplate;

				  public User queryUser(long id) {
					String sql = "select * from user where id="+id;
					return jdbcTemplate.query(sql, new UserRowMapper()).get(0);
				  }

				  class UserRowMapper implements RowMapper<User> {
					public User mapRow(ResultSet rs, int rowNum) throws SQLException {
					  User user = new User();
					  user.setId(rs.getLong("id"));
					  user.setName(rs.getString("name"));
					  user.setTelephone(rs.getString("telephone"));
					  return user;
					}
				  }
				}
				
			
			那 JdbcTemplate 底层具体是如何实现的呢
			
			JdbcTemplate 通过回调的机制，将不变的执行流程抽离出来，放到模板方法 execute() 中，
			将可变的部分设计成回调 StatementCallback，由用户来定制。
			query() 函数是对 execute() 函数的二次封装，让接口用起来更加方便。
		
		
							
				@Override
				public <T> List<T> query(String sql, RowMapper<T> rowMapper) throws DataAccessException {
				 return query(sql, new RowMapperResultSetExtractor<T>(rowMapper));
				}

				@Override
				public <T> T query(final String sql, final ResultSetExtractor<T> rse) throws DataAccessException {
				 Assert.notNull(sql, "SQL must not be null");
				 Assert.notNull(rse, "ResultSetExtractor must not be null");
				 if (logger.isDebugEnabled()) {
				  logger.debug("Executing SQL query [" + sql + "]");
				 }

				 class QueryStatementCallback implements StatementCallback<T>, SqlProvider {
				  @Override
				  public T doInStatement(Statement stmt) throws SQLException {
				   ResultSet rs = null;
				   try {
					rs = stmt.executeQuery(sql);
					ResultSet rsToUse = rs;
					if (nativeJdbcExtractor != null) {
					 rsToUse = nativeJdbcExtractor.getNativeResultSet(rs);
					}
					return rse.extractData(rsToUse);
				   }
				   finally {
					JdbcUtils.closeResultSet(rs);
				   }
				  }
				  @Override
				  public String getSql() {
				   return sql;
				  }
				 }

				 return execute(new QueryStatementCallback());
				}

				@Override
				public <T> T execute(StatementCallback<T> action) throws DataAccessException {
				 Assert.notNull(action, "Callback object must not be null");

				 Connection con = DataSourceUtils.getConnection(getDataSource());
				 Statement stmt = null;
				 try {
				  Connection conToUse = con;
				  if (this.nativeJdbcExtractor != null &&
					this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativeStatements()) {
				   conToUse = this.nativeJdbcExtractor.getNativeConnection(con);
				  }
				  stmt = conToUse.createStatement();
				  applyStatementSettings(stmt);
				  Statement stmtToUse = stmt;
				  if (this.nativeJdbcExtractor != null) {
				   stmtToUse = this.nativeJdbcExtractor.getNativeStatement(stmt);
				  }
				  T result = action.doInStatement(stmtToUse);
				  handleWarnings(stmt);
				  return result;
				 }
				 catch (SQLException ex) {
				  // Release Connection early, to avoid potential connection pool deadlock
				  // in the case when the exception translator hasn't been initialized yet.
				  JdbcUtils.closeStatement(stmt);
				  stmt = null;
				  DataSourceUtils.releaseConnection(con, getDataSource());
				  con = null;
				  throw getExceptionTranslator().translate("StatementCallback", getSql(action), ex);
				 }
				 finally {
				  JdbcUtils.closeStatement(stmt);
				  DataSourceUtils.releaseConnection(con, getDataSource());
				 }
				}
				
	应用举例二：setClickListener(）
	
		在客户端开发中，我们经常给控件注册事件监听器，比如下面这段代码，
		就是在 Android 应用开发中，给 Button 控件的点击事件注册监听器。
		
		
						
			Button button = (Button)findViewById(R.id.button);
			button.setOnClickListener(new OnClickListener() {
			  @Override
			  public void onClick(View v) {
				System.out.println("I am clicked.");
			  }
			});
			
		这里的回调算是异步回调，我们往 setOnClickListener() 函数中注册好回调函数之后，并不需要等待回调函数执行。
		这也印证了我们前面讲的，异步回调比较像观察者模式。
		
	应用举例三：addShutdownHook()
	
		Hook 可以翻译成“钩子”，那它跟 Callback 有什么区别呢？
		
		网上有人认为 Hook 就是 Callback，两者说的是一回事儿，只是表达不同而已。
		而有人觉得 Hook 是 Callback 的一种应用。
		Callback 更侧重语法机制的描述，Hook 更加侧重应用场景的描述。
		我个人比较认可后面一种说法。不过，这个也不重要，我们只需要见了代码能认识，遇到场景会用就可以了。
		
	Hook 比较经典的应用场景是 Tomcat 和 JVM 的 shutdown hook
	
		JVM 提供了 Runtime.addShutdownHook(Thread hook) 方法，可以注册一个 JVM 关闭的 Hook。
		
		
					
			public class ShutdownHookDemo {

			  private static class ShutdownHook extends Thread {
				public void run() {
				  System.out.println("I am called during shutting down.");
				}
			  }

			  public static void main(String[] args) {
				Runtime.getRuntime().addShutdownHook(new ShutdownHook());
			  }

			}
			
			
			
			我们再来看 addShutdownHook() 的代码实现
				public class Runtime {
				  public void addShutdownHook(Thread hook) {
					SecurityManager sm = System.getSecurityManager();
					if (sm != null) {
					  sm.checkPermission(new RuntimePermission("shutdownHooks"));
					}
					ApplicationShutdownHooks.add(hook);
				  }
				}

				class ApplicationShutdownHooks {
					/* The set of registered hooks */
					private static IdentityHashMap<Thread, Thread> hooks;
					static {
							hooks = new IdentityHashMap<>();
						} catch (IllegalStateException e) {
							hooks = null;
						}
					}

					static synchronized void add(Thread hook) {
						if(hooks == null)
							throw new IllegalStateException("Shutdown in progress");

						if (hook.isAlive())
							throw new IllegalArgumentException("Hook already running");

						if (hooks.containsKey(hook))
							throw new IllegalArgumentException("Hook previously registered");

						hooks.put(hook, hook);
					}

					static void runHooks() {
						Collection<Thread> threads;
						synchronized(ApplicationShutdownHooks.class) {
							threads = hooks.keySet();
							hooks = null;
						}

						for (Thread hook : threads) {
							hook.start();
						}
						for (Thread hook : threads) {
							while (true) {
								try {
									hook.join();
									break;
								} catch (InterruptedException ignored) {
								}
							}
						}
					}
				}
				
		当应用程序关闭的时候，JVM 会调用这个类的 runHooks() 方法，创建多个线程，并发地执行多个 Hook。
		我们在注册完 Hook 之后，并不需要等待 Hook 执行完成，所以，这也算是一种异步回调。
		
		
模板模式 VS 回调

	从应用场景上来，同步回调跟模板模式几乎一致。
	它们都是在一个大的算法骨架中，自由替换其中的某个步骤，起到代码复用和扩展的目的。
	而异步回调跟模板模式有较大差别，更像是观察者模式。
	
	从代码实现上来看，回调和模板模式完全不同。回调基于组合关系来实现，把一个对象传递给另一个对象，
	是一种对象之间的关系；模板模式基于继承关系来实现，子类重写父类的抽象方法，是一种类之间的关系。
	
	前面我们也讲到，组合优于继承。实际上，这里也不例外。
	在代码实现上，回调相对于模板模式会更加灵活，主要体现在下面几点。
	
	
	像 Java 这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不再具有继承的能力。
	
	回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类。
	
	如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到其中的一个模板方法，
	子类也必须实现所有的抽象方法。而回调就更加灵活，我们只需要往用到的模板方法中注入回调对象即可。
	
	
	
	Hook也是一种回调，不过，它提供的功能是，可以在程序中，动态的添加回调的逻辑，
	
	进行异步回调，在情况A可以把以前的钩子都取消，添加新的钩子等等之类