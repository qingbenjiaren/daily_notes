状态机有 3 个组成部分：状态（State）、事件（Event）、动作（Action）
		事件触发状态的转移及动作的执行
		不过，动作不是必须的，也可能只转移状态，不执行任何动作。

		public enum State {
		  SMALL(0),
		  SUPER(1),
		  FIRE(2),
		  CAPE(3);

		  private int value;

		  private State(int value) {
			this.value = value;
		  }

		  public int getValue() {
			return this.value;
		  }
		}

		public class MarioStateMachine {
		  private int score;
		  private State currentState;

		  public MarioStateMachine() {
			this.score = 0;
			this.currentState = State.SMALL;
		  }

		  public void obtainMushRoom() {
			//TODO
		  }

		  public void obtainCape() {
			//TODO
		  }

		  public void obtainFireFlower() {
			//TODO
		  }

		  public void meetMonster() {
			//TODO
		  }

		  public int getScore() {
			return this.score;
		  }

		  public State getCurrentState() {
			return this.currentState;
		  }
		}

		public class ApplicationDemo {
		  public static void main(String[] args) {
			MarioStateMachine mario = new MarioStateMachine();
			mario.obtainMushRoom();
			int score = mario.getScore();
			State state = mario.getCurrentState();
			System.out.println("mario score: " + score + "; state: " + state);
		  }
		}
		
		
	状态机实现方式一：分支逻辑法
		
		参照状态转移图，将每一个状态转移，原模原样地直译成代码。这样编写的代码会包含大量的 if-else 或 
		switch-case 分支判断逻辑，甚至是嵌套的分支判断逻辑，所以，我把这种方法暂且命名为分支逻辑法。
		
		
			public class MarioStateMachine {
			  private int score;
			  private State currentState;

			  public MarioStateMachine() {
				this.score = 0;
				this.currentState = State.SMALL;
			  }

			  public void obtainMushRoom() {
				if (currentState.equals(State.SMALL)) {
				  this.currentState = State.SUPER;
				  this.score += 100;
				}
			  }

			  public void obtainCape() {
				if (currentState.equals(State.SMALL) || currentState.equals(State.SUPER) ) {
				  this.currentState = State.CAPE;
				  this.score += 200;
				}
			  }

			  public void obtainFireFlower() {
				if (currentState.equals(State.SMALL) || currentState.equals(State.SUPER) ) {
				  this.currentState = State.FIRE;
				  this.score += 300;
				}
			  }

			  public void meetMonster() {
				if (currentState.equals(State.SUPER)) {
				  this.currentState = State.SMALL;
				  this.score -= 100;
				  return;
				}

				if (currentState.equals(State.CAPE)) {
				  this.currentState = State.SMALL;
				  this.score -= 200;
				  return;
				}

				if (currentState.equals(State.FIRE)) {
				  this.currentState = State.SMALL;
				  this.score -= 300;
				  return;
				}
			  }

			  public int getScore() {
				return this.score;
			  }

			  public State getCurrentState() {
				return this.currentState;
			  }
			}
		
		对于简单的状态机来说，分支逻辑这种实现方式是可以接受的。但是，对于复杂的状态机来说，
		这种实现方式极易漏写或者错写某个状态转移。除此之外，代码中充斥着大量的 if-else 或者 
		switch-case 分支判断逻辑，可读性和可维护性都很差。如果哪天修改了状态机中的某个状态转移，
		我们要在冗长的分支逻辑中找到对应的代码进行修改，很容易改错，引入 bug。
		
		
	状态机实现方式二：查表法
	
		实际上，除了用状态转移图来表示之外，状态机还可以用二维表来表示，如下所示
		相对于分支逻辑的实现方式，查表法的代码实现更加清晰，可读性和可维护性更好。
		当修改状态机时，我们只需要修改 transitionTable 和 actionTable 两个二维数组即可
		
			public enum Event {
			  GOT_MUSHROOM(0),
			  GOT_CAPE(1),
			  GOT_FIRE(2),
			  MET_MONSTER(3);

			  private int value;

			  private Event(int value) {
				this.value = value;
			  }

			  public int getValue() {
				return this.value;
			  }
			}

			public class MarioStateMachine {
			  private int score;
			  private State currentState;

			  private static final State[][] transitionTable = {
					  {SUPER, CAPE, FIRE, SMALL},
					  {SUPER, CAPE, FIRE, SMALL},
					  {CAPE, CAPE, CAPE, SMALL},
					  {FIRE, FIRE, FIRE, SMALL}
			  };

			  private static final int[][] actionTable = {
					  {+100, +200, +300, +0},
					  {+0, +200, +300, -100},
					  {+0, +0, +0, -200},
					  {+0, +0, +0, -300}
			  };

			  public MarioStateMachine() {
				this.score = 0;
				this.currentState = State.SMALL;
			  }

			  public void obtainMushRoom() {
				executeEvent(Event.GOT_MUSHROOM);
			  }

			  public void obtainCape() {
				executeEvent(Event.GOT_CAPE);
			  }

			  public void obtainFireFlower() {
				executeEvent(Event.GOT_FIRE);
			  }

			  public void meetMonster() {
				executeEvent(Event.MET_MONSTER);
			  }

			  private void executeEvent(Event event) {
				int stateValue = currentState.getValue();
				int eventValue = event.getValue();
				this.currentState = transitionTable[stateValue][eventValue];
				this.score += actionTable[stateValue][eventValue];
			  }

			  public int getScore() {
				return this.score;
			  }

			  public State getCurrentState() {
				return this.currentState;
			  }

			}
			
	状态机实现方式三：状态模式
		
		
			public interface IMario { //所有状态类的接口
			  State getName();
			  //以下是定义的事件
			  void obtainMushRoom();
			  void obtainCape();
			  void obtainFireFlower();
			  void meetMonster();
			}

			public class SmallMario implements IMario {
			  private MarioStateMachine stateMachine;

			  public SmallMario(MarioStateMachine stateMachine) {
				this.stateMachine = stateMachine;
			  }

			  @Override
			  public State getName() {
				return State.SMALL;
			  }

			  @Override
			  public void obtainMushRoom() {
				stateMachine.setCurrentState(new SuperMario(stateMachine));
				stateMachine.setScore(stateMachine.getScore() + 100);
			  }

			  @Override
			  public void obtainCape() {
				stateMachine.setCurrentState(new CapeMario(stateMachine));
				stateMachine.setScore(stateMachine.getScore() + 200);
			  }

			  @Override
			  public void obtainFireFlower() {
				stateMachine.setCurrentState(new FireMario(stateMachine));
				stateMachine.setScore(stateMachine.getScore() + 300);
			  }

			  @Override
			  public void meetMonster() {
				// do nothing...
			  }
			}

			public class SuperMario implements IMario {
			  private MarioStateMachine stateMachine;

			  public SuperMario(MarioStateMachine stateMachine) {
				this.stateMachine = stateMachine;
			  }

			  @Override
			  public State getName() {
				return State.SUPER;
			  }

			  @Override
			  public void obtainMushRoom() {
				// do nothing...
			  }

			  @Override
			  public void obtainCape() {
				stateMachine.setCurrentState(new CapeMario(stateMachine));
				stateMachine.setScore(stateMachine.getScore() + 200);
			  }

			  @Override
			  public void obtainFireFlower() {
				stateMachine.setCurrentState(new FireMario(stateMachine));
				stateMachine.setScore(stateMachine.getScore() + 300);
			  }

			  @Override
			  public void meetMonster() {
				stateMachine.setCurrentState(new SmallMario(stateMachine));
				stateMachine.setScore(stateMachine.getScore() - 100);
			  }
			}

			// 省略CapeMario、FireMario类...

			public class MarioStateMachine {
			  private int score;
			  private IMario currentState; // 不再使用枚举来表示状态

			  public MarioStateMachine() {
				this.score = 0;
				this.currentState = new SmallMario(this);
			  }

			  public void obtainMushRoom() {
				this.currentState.obtainMushRoom();
			  }

			  public void obtainCape() {
				this.currentState.obtainCape();
			  }

			  public void obtainFireFlower() {
				this.currentState.obtainFireFlower();
			  }

			  public void meetMonster() {
				this.currentState.meetMonster();
			  }

			  public int getScore() {
				return this.score;
			  }

			  public State getCurrentState() {
				return this.currentState.getName();
			  }

			  public void setScore(int score) {
				this.score = score;
			  }

			  public void setCurrentState(IMario currentState) {
				this.currentState = currentState;
			  }
			}
			
			
	优化版本
	
		
			public interface IMario {
			  State getName();
			  void obtainMushRoom(MarioStateMachine stateMachine);
			  void obtainCape(MarioStateMachine stateMachine);
			  void obtainFireFlower(MarioStateMachine stateMachine);
			  void meetMonster(MarioStateMachine stateMachine);
			}

			public class SmallMario implements IMario {
			  private static final SmallMario instance = new SmallMario();
			  private SmallMario() {}
			  public static SmallMario getInstance() {
				return instance;
			  }

			  @Override
			  public State getName() {
				return State.SMALL;
			  }

			  @Override
			  public void obtainMushRoom(MarioStateMachine stateMachine) {
				stateMachine.setCurrentState(SuperMario.getInstance());
				stateMachine.setScore(stateMachine.getScore() + 100);
			  }

			  @Override
			  public void obtainCape(MarioStateMachine stateMachine) {
				stateMachine.setCurrentState(CapeMario.getInstance());
				stateMachine.setScore(stateMachine.getScore() + 200);
			  }

			  @Override
			  public void obtainFireFlower(MarioStateMachine stateMachine) {
				stateMachine.setCurrentState(FireMario.getInstance());
				stateMachine.setScore(stateMachine.getScore() + 300);
			  }

			  @Override
			  public void meetMonster(MarioStateMachine stateMachine) {
				// do nothing...
			  }
			}

			// 省略SuperMario、CapeMario、FireMario类...

			public class MarioStateMachine {
			  private int score;
			  private IMario currentState;

			  public MarioStateMachine() {
				this.score = 0;
				this.currentState = SmallMario.getInstance();
			  }

			  public void obtainMushRoom() {
				this.currentState.obtainMushRoom(this);
			  }

			  public void obtainCape() {
				this.currentState.obtainCape(this);
			  }

			  public void obtainFireFlower() {
				this.currentState.obtainFireFlower(this);
			  }

			  public void meetMonster() {
				this.currentState.meetMonster(this);
			  }

			  public int getScore() {
				return this.score;
			  }

			  public State getCurrentState() {
				return this.currentState.getName();
			  }

			  public void setScore(int score) {
				this.score = score;
			  }

			  public void setCurrentState(IMario currentState) {
				this.currentState = currentState;
			  }
			}
			
	实际上，像游戏这种比较复杂的状态机，包含的状态比较多，我优先推荐使用查表法，
	而状态模式会引入非常多的状态类，会导致代码比较难维护。
	
	。相反，像电商下单、外卖下单这种类型的状态机，它们的状态并不多，状态转移也比较简单，
	但事件触发执行的动作包含的业务逻辑可能会比较复杂，所以，更加推荐使用状态模式来实现。
		