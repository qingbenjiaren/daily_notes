创建型：解决对象的创建
结构型：解决类或对象的组合或组装
行为型：类或对象之间的交互

行为型设计模式比较多：
	观察者模式、模板模式、策略模式、职责链模式、状态模式、迭代器模式、访问者模式、备忘录模式、命令模式、解释器模式、中介模式。
	
	观察者模式在实际的开发中应用得比较多，有同步阻塞的实现方式，也有异步非阻塞的实现方式
	
	
	观察者模式也叫做发布订阅模式
		
		在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。
	
	最经典的实现方式：
		抽象一个被观察者：Subject，有以下三个方法
			void registerObserver(Observer observer);
			void removeObserver(Observer observer);
			void notifyObservers(Message message);
			
		抽象一个观察者 Observer
			void update(Message message);
		
		具体的被观察者，实现方法
			private List observers = new ArrayList();
			
			public void notifyObservers(Message message) {
				for (Observer observer : observers) {
					observer.update(message);
				}
			}
		
		具体的观察者：接收通知，做对应的业务处理
		
	以上的设计方式和代码时观察者模式的"模板代码"，只能反映大体的设计思路。
	
	在真实的软件开发中，并不需要照搬上面的模板代码。
	
	观察者模式的实现方法各式各样，函数、类的命名等会根据业务场景的不同有很大的差别，比如 register 函数还可以叫作 attach，remove 函数还可以叫作 detach 等等。不过，万变不离其宗，设计思路都是差不多的。
	
	
	应该注意培养抽象的能力，能抽象出观察者和被观察者能节省很多工作
	
	观察者可以是现实世界中的具体对象，也可以是抽象出来的对象
	
	实际上，设计模式要干的事情就是解耦。创建型模式是将创建和使用代码解耦，结构型模式是将不同功能代码解耦，行为型模式是将不同的行为代码解耦，具体到观察者模式，它是将观察者和被观察者代码解耦。
	
	
	观察者模式的应用场景非常广泛，小到代码层面的解耦，大到架构层面的系统解耦，再或者一些产品的设计思路，都有这种模式的影子，比如，邮件订阅、RSS Feeds，本质上都是观察者模式。
	
	
	以上的观察者模式是同步阻塞的
	
	也可以有异步的方式（参考spring 的监听器）
	
	Google Guava EventBus
	
	通知的话很有很多方式：
		RPC
		MQ
		
		
	借助设计模式，我们利用更好的代码结构，将一大坨代码拆分成职责更单一的小类，让其满足开闭原则、
	高内聚低耦合等特性，以此来控制和应对代码的复杂性，提高代码的可扩展性。
	
	
	生产者-消费者模式和观察者模式的区别
		
		1、生产者-消费者模式以异步形式实现，消费者之间存在竞争关系。观察者模式者之间无竞争关系
		
		
	观察者模式有：同步阻塞、异步非阻塞、进程内、进程间的实现方式。
	
	框架的作用有：隐藏实现细节，降低开发难度，做到代码复用，解耦业务与非业务代码，让程序员聚焦业务开发。
	
	EventBus。
	
		时间总线
		Google Guava EventBus:它不仅仅支持异步非阻塞模式，同时也支持同步阻塞模式
		
	EventBus、AsyncEventBus
	
	register() 函数
	
	unregister() 函数
	
	post() 函数
	
	@Subscribe 注解
	
	
	
	山寨一个Eventbus 出来
	
	
	1、Subscribe注解，用于标明观察者中哪个函数可以接收消息
		@Retention(RetentionPolicy.RUNTIME)
		@Target(ElementType.METHOD)
		@Beta
		public @interface Subscribe {}
	
	
	2、ObserverAction,用来表示@Subscribe注解的方法，其中target表示观察者类，method表示方法
		public class ObserverAction {
			private Object target;
			private Method method;

			public ObserverAction(Object target, Method method) {
				this.target = Preconditions.checkNotNull(target);
				this.method = method;
				this.method.setAccessible(true);
			}
			
			public void execute(Object event) { // event是method方法的参数 
				try { 
					method.invoke(target, event);
				} catch (InvocationTargetException | IllegalAccessException e) {
					e.printStackTrace(); 
				} 
			}
		}
	
	3、ObserverRegistry
		ObserverRegistry类就是前面讲的Oberver注册表，是最复杂的一个类，框架中几乎所有的核心逻辑都在这个类中。
		这个类大量使用了java的反射语法，不过代码整体来说都不难理解，其中，一个比较有技巧的地方是
		CopyOnWriteArraySet的使用。
		
		CopyOnWriteArraySet 顾名思义，在写入数据的时候，会创建一个新的set，并将原始数据clone到新的set中，
		在新的set中写入数据完成之后，再用新的set替换老的set，。这样就能保证在写入数据的时候，不影响数据的读取操作，
		以此来解决读写并发问题。除此之外，CopyOnWriteSet 还通过加锁的方式，避免了并发写冲突。
	
		
		public class ObserverRegistry {
		  private ConcurrentMap<Class<?>, CopyOnWriteArraySet<ObserverAction>> registry = new ConcurrentHashMap<>();

		  public void register(Object observer) {
			Map<Class<?>, Collection<ObserverAction>> observerActions = findAllObserverActions(observer);
			for (Map.Entry<Class<?>, Collection<ObserverAction>> entry : observerActions.entrySet()) {
			  Class<?> eventType = entry.getKey();
			  Collection<ObserverAction> eventActions = entry.getValue();
			  CopyOnWriteArraySet<ObserverAction> registeredEventActions = registry.get(eventType);
			  if (registeredEventActions == null) {
				registry.putIfAbsent(eventType, new CopyOnWriteArraySet<>());
				registeredEventActions = registry.get(eventType);
			  }
			  registeredEventActions.addAll(eventActions);
			}
		  }

		  public List<ObserverAction> getMatchedObserverActions(Object event) {
			List<ObserverAction> matchedObservers = new ArrayList<>();
			Class<?> postedEventType = event.getClass();
			for (Map.Entry<Class<?>, CopyOnWriteArraySet<ObserverAction>> entry : registry.entrySet()) {
			  Class<?> eventType = entry.getKey();
			  Collection<ObserverAction> eventActions = entry.getValue();
			  if (postedEventType.isAssignableFrom(eventType)) {
				matchedObservers.addAll(eventActions);
			  }
			}
			return matchedObservers;
		  }

		  private Map<Class<?>, Collection<ObserverAction>> findAllObserverActions(Object observer) {
			Map<Class<?>, Collection<ObserverAction>> observerActions = new HashMap<>();
			Class<?> clazz = observer.getClass();
			for (Method method : getAnnotatedMethods(clazz)) {
			  Class<?>[] parameterTypes = method.getParameterTypes();
			  Class<?> eventType = parameterTypes[0];
			  if (!observerActions.containsKey(eventType)) {
				observerActions.put(eventType, new ArrayList<>());
			  }
			  observerActions.get(eventType).add(new ObserverAction(observer, method));
			}
			return observerActions;
		  }

		  private List<Method> getAnnotatedMethods(Class<?> clazz) {
			List<Method> annotatedMethods = new ArrayList<>();
			for (Method method : clazz.getDeclaredMethods()) {
			  if (method.isAnnotationPresent(Subscribe.class)) {
				Class<?>[] parameterTypes = method.getParameterTypes();
				Preconditions.checkArgument(parameterTypes.length == 1,
						"Method %s has @Subscribe annotation but has %s parameters."
								+ "Subscriber methods must have exactly 1 parameter.",
						method, parameterTypes.length);
				annotatedMethods.add(method);
			  }
			}
			return annotatedMethods;
		  }
		}
		
	4、EventBus
		EventBus 实现的是阻塞同步的观察者模式。看代码你可能会有些疑问，这明明就用到了线程池 Executor 啊。
		实际上，MoreExecutors.directExecutor() 是 Google Guava 提供的工具类，看似是多线程，实际上是单线程。
		之所以要这么实现，主要还是为了跟 AsyncEventBus 统一代码逻辑，做到代码复用。
		
		
			public class EventBus {
			  private Executor executor;
			  private ObserverRegistry registry = new ObserverRegistry();

			  public EventBus() {
				this(MoreExecutors.directExecutor());
			  }

			  protected EventBus(Executor executor) {
				this.executor = executor;
			  }

			  public void register(Object object) {
				registry.register(object);
			  }

			  public void post(Object event) {
				List<ObserverAction> observerActions = registry.getMatchedObserverActions(event);
				for (ObserverAction observerAction : observerActions) {
				  executor.execute(new Runnable() {
					@Override
					public void run() {
					  observerAction.execute(event);
					}
				  });
				}
			  }
			}
			
	5.AsyncEventBus
		有了 EventBus，AsyncEventBus 的实现就非常简单了。为了实现异步非阻塞的观察者模式，
		它就不能再继续使用 MoreExecutors.directExecutor() 了，而是需要在构造函数中，由调用者注入线程池。
		
		
		
		public class AsyncEventBus extends EventBus {
		  public AsyncEventBus(Executor executor) {
			super(executor);
		  }
		}
		
	很多人觉得做业务开发没有技术挑战，实际上，做业务开发也会涉及很多非业务功能的开发，
	比如今天讲到的 EventBus。在平时的业务开发中，我们要善于抽象这些非业务的、可复用的功能，
	并积极地把它们实现成通用的框架。

	Google Guava EventBus源码
	https://github.com/google/guava