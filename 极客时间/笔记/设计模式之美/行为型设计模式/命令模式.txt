命令模式、解释器模式、中介模式。这 3 个模式使用频率低、理解难度大，只在非常特定的应用场景下才会用到，所以，不是我们学习的重点，你只需要稍微了解，见了能认识就可以了。



命令模式将请求（命令）封装为一个对象，这样可以使用不同的请求参数化其他对象（将不同请求依赖注入到其他对象），并且能够支持请求（命令）的排队执行、记录日志、撤销等（附加控制）功能。


	落实到编码实现，命令模式用的最核心的实现手段，是将函数封装成对象。
	
	设计一个包含这个函数的类，实例化一个对象传来传去，这样就可以实现把函数像对象一样使用
	
	
	当我们把函数封装成对象之后，对象就可以存储下来，方便控制执行。

	命令模式的主要作用和应用场景，是用来控制命令的执行，比如，异步、延迟、排队执行命令、撤销重做命令、存储命令、给命令记录日志等等，这才是命令模式能发挥独一无二作用的地方。
	
	
	
	假设我们正在开发一个类似《天天酷跑》或者《QQ 卡丁车》这样的手游。
	
	为了提高性能，我们会把游戏中玩家的信息保存在内存中。
	
	在游戏进行的过程中，只更新内存中的数据，游戏结束之后，再将内存中的数据存档，也就是持久化到数据库中。
	
	同一个游戏场景里的玩家，会被分配到同一台服务上。
	
	