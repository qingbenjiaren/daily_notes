它用来遍历集合对象。不过，很多编程语言都将迭代器作为一个基础的类库，直接提供出来了。

	在平时开发中，特别是业务开发，我们直接使用即可，很少会自己去实现一个迭代器
	
	不过，知其然知其所以然，弄懂原理能帮助我们更好的使用这些工具类，所以，我觉得还是有必要学习一下这个模式。
	
	迭代器模式（Iterator Design Pattern），也叫作游标模式（Cursor Design Pattern）。
	
	
	迭代器模式将集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更加单一。
	
	
	从零开始开发
		
		
		
		// 接口定义方式一
		public interface Iterator<E> {
		  boolean hasNext();
		  void next();
		  E currentItem();
		}

		// 接口定义方式二
		public interface Iterator<E> {
		  boolean hasNext();
		  E next();
		}
		
		
			public class ArrayIterator<E> implements Iterator<E> {
			  private int cursor;
			  private ArrayList<E> arrayList;

			  public ArrayIterator(ArrayList<E> arrayList) {
				this.cursor = 0;
				this.arrayList = arrayList;
			  }

			  @Override
			  public boolean hasNext() {
				return cursor != arrayList.size(); //注意这里，cursor在指向最后一个元素的时候，hasNext()仍旧返回true。
			  }

			  @Override
			  public void next() {
				cursor++;
			  }

			  @Override
			  public E currentItem() {
				if (cursor >= arrayList.size()) {
				  throw new NoSuchElementException();
				}
				return arrayList.get(cursor);
			  }
			}

			public class Demo {
			  public static void main(String[] args) {
				ArrayList<String> names = new ArrayList<>();
				names.add("xzg");
				names.add("wang");
				names.add("zheng");
				
				Iterator<String> iterator = new ArrayIterator(names);
				while (iterator.hasNext()) {
				  System.out.println(iterator.currentItem());
				  iterator.next();
				}
			  }
			}
			
			
			
			public interface List<E> {
			  Iterator iterator();
			  //...省略其他接口函数...
			}

			public class ArrayList<E> implements List<E> {
			  //...
			  public Iterator iterator() {
				return new ArrayIterator(this);
			  }
			  //...省略其他代码
			}

			public class Demo {
			  public static void main(String[] args) {
				List<String> names = new ArrayList<>();
				names.add("xzg");
				names.add("wang");
				names.add("zheng");
				
				Iterator<String> iterator = names.iterator();
				while (iterator.hasNext()) {
				  System.out.println(iterator.currentItem());
				  iterator.next();
				}
			  }
			}
			
			
		总结下来就三句话：迭代器中需要定义 hasNext()、currentItem()、next() 三个最基本的方法。
		
		迭代器模式的优势
		
			一般来讲，遍历集合数据有三种方法：for 循环、foreach 循环、iterator 迭代器。对于这三种方式，我拿 Java 语言来举例说明一下。具体的代码如下所示：
			
						
			List<String> names = new ArrayList<>();
			names.add("xzg");
			names.add("wang");
			names.add("zheng");

			// 第一种遍历方式：for循环
			for (int i = 0; i < names.size(); i++) {
			  System.out.print(names.get(i) + ",");
			}

			// 第二种遍历方式：foreach循环
			for (String name : names) {
			  System.out.print(name + ",")
			}

			// 第三种遍历方式：迭代器遍历
			Iterator<String> iterator = names.iterator();
			while (iterator.hasNext()) {
			  System.out.print(iterator.next() + ",");//Java中的迭代器接口是第二种定义方式，next()既移动游标又返回数据
			}
			
			
			对于类似数组和链表这样的数据结构，遍历方式比较简单，直接使用 for 循环来遍历就足够了。
			
			但是，对于复杂的数据结构（比如树、图）来说，有各种复杂的遍历方式。
			
				比如，树有前中后序、按层遍历，图有深度优先、广度优先遍历等等。
				如果由客户端代码来实现这些遍历算法，势必增加开发成本，而且容易写错。
				如果将这部分遍历的逻辑写到容器类中，也会导致容器类代码的复杂性。
				
				前面也多次提到，应对复杂性的方法就是拆分。我们可以将遍历操作拆分到迭代器类中。比如，
				针对图的遍历，我们就可以定义 DFSIterator、BFSIterator 两个迭代器类，让它们分别来实现深度优先遍历和广度优先遍历。
				
				其次，将游标指向的当前位置等信息，存储在迭代器类中，每个迭代器独享游标信息。这样，我们就可以创建多个不同的迭代器，同时对同一个容器进行遍历而互不影响。
		
				最后，容器和迭代器都提供了抽象的接口，方便我们在开发的时候，基于接口而非具体的实现编程。
				当需要切换新的遍历算法的时候，比如，从前往后遍历链表切换成从后往前遍历链表，客户端代码只需要将迭代器类从 LinkedIterator 
				切换为 ReversedLinkedIterator 即可，其他代码都不需要修改。除此之外，添加新的遍历算法，我们只需要扩展新的迭代器类，也更符合开闭原则。
				
				
			迭代器模式封装集合内部的复杂数据结构，开发者不需要了解如何遍历，直接使用容器提供的迭代器即可；
			迭代器模式将集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更加单一；
			迭代器模式让添加新的遍历算法更加容易，更符合开闭原则。除此之外，因为迭代器都实现自相同的接口，在开发中，基于接口而非实现编程，替换迭代器也变得更加容易。
			
			
			问题：，如果在使用迭代器的同时删除容器中的元素，会导致迭代器报错，这是为什么呢？如何来解决这个问题呢？
				
				在遍历的同时增删集合元素会发生什么？
				
					在通过迭代器来遍历集合元素的同时，增加或者删除集合中的元素，有可能会导致某个元素被重复遍历或遍历不到。
					不过，并不是所有情况下都会遍历出错，有的时候也可以正常遍历，所以，这种行为称为结果不可预期行为或者未决行为，也就是说，运行结果到底是对还是错，要视情况而定。
					
					
					示例代码：
						
						public interface Iterator<E> {
						  boolean hasNext();
						  void next();
						  E currentItem();
						}

						public class ArrayIterator<E> implements Iterator<E> {
						  private int cursor;
						  private ArrayList<E> arrayList;

						  public ArrayIterator(ArrayList<E> arrayList) {
							this.cursor = 0;
							this.arrayList = arrayList;
						  }

						  @Override
						  public boolean hasNext() {
							return cursor < arrayList.size();
						  }

						  @Override
						  public void next() {
							cursor++;
						  }

						  @Override
						  public E currentItem() {
							if (cursor >= arrayList.size()) {
							  throw new NoSuchElementException();
							}
							return arrayList.get(cursor);
						  }
						}

						public interface List<E> {
						  Iterator iterator();
						}

						public class ArrayList<E> implements List<E> {
						  //...
						  public Iterator iterator() {
							return new ArrayIterator(this);
						  }
						  //...
						}

						public class Demo {
						  public static void main(String[] args) {
							List<String> names = new ArrayList<>();
							names.add("a");
							names.add("b");
							names.add("c");
							names.add("d");

							Iterator<String> iterator = names.iterator();
							iterator.next();
							names.remove("a");
						  }
						}
						
						我们知道，ArrayList 底层对应的是数组这种数据结构，在执行完第 55 行代码的时候，数组中存储的是 a、b、c、d 四个元素，
						迭代器的游标 cursor 指向元素 a。当执行完第 56 行代码的时候，游标指向元素 b，到这里都没有问题。
						
						看processon
						
						不过，如果第 57 行代码删除的不是游标前面的元素（元素 a）以及游标所在位置的元素（元素 b），而是游标后面的元素（元素 c 和 d），
						这样就不会存在任何问题了，不会存在某个元素遍历不到的情况了。
						
						
						把删除改为添加
							
				
							public class Demo {
							  public static void main(String[] args) {
								List<String> names = new ArrayList<>();
								names.add("a");
								names.add("b");
								names.add("c");
								names.add("d");

								Iterator<String> iterator = names.iterator();
								iterator.next();
								names.add(0, "x");
							  }
							}
							
							
				如何应对遍历时改变集合导致的未决行为？
				
					当通过迭代器来遍历集合的时候，增加、删除集合元素会导致不可预期的遍历结果。
					实际上，“不可预期”比直接出错更加可怕，有的时候运行正确，有的时候运行错误，
					一些隐藏很深、很难 debug 的 bug 就是这么产生的。那我们如何才能避免出现这种不可预期的运行结果呢？
				
				有两种比较干脆利索的解决方案：一种是遍历的时候不允许增删元素，另一种是增删元素之后让遍历报错。
				
				
				Java 语言就是采用的这种解决方案，增删元素之后，让遍历报错。
				
					我们在 ArrayList 中定义一个成员变量 modCount，记录集合被修改的次数，集合每调用一次增加或删除元素的函数，就会给 modCount 加 1。
					当通过调用集合上的 iterator() 函数来创建迭代器的时候，我们把 modCount 值传递给迭代器的 expectedModCount 成员变量，
					之后每次调用迭代器上的 hasNext()、next()、currentItem() 函数，我们都会检查集合上的 modCount 是否等于 expectedModCount，
					也就是看，在创建完迭代器之后，modCount 是否改变过。
					
					
					如果两个值不相同，那就说明集合存储的元素已经改变了，要么增加了元素，要么删除了元素，之前创建的迭代器已经不能正确运行了，
					再继续使用就会产生不可预期的结果，所以我们选择 fail-fast 解决方式，抛出运行时异常，结束掉程序，让程序员尽快修复这个因为不正确使用迭代器而产生的 bug。
					
					
										
					public class ArrayIterator implements Iterator {
					  private int cursor;
					  private ArrayList arrayList;
					  private int expectedModCount;

					  public ArrayIterator(ArrayList arrayList) {
						this.cursor = 0;
						this.arrayList = arrayList;
						this.expectedModCount = arrayList.modCount;
					  }

					  @Override
					  public boolean hasNext() {
						checkForComodification();
						return cursor < arrayList.size();
					  }

					  @Override
					  public void next() {
						checkForComodification();
						cursor++;
					  }

					  @Override
					  public Object currentItem() {
						checkForComodification();
						return arrayList.get(cursor);
					  }
					  
					  private void checkForComodification() {
						if (arrayList.modCount != expectedModCount)
							throw new ConcurrentModificationException();
					  }
					}

					//代码示例
					public class Demo {
					  public static void main(String[] args) {
						List<String> names = new ArrayList<>();
						names.add("a");
						names.add("b");
						names.add("c");
						names.add("d");

						Iterator<String> iterator = names.iterator();
						iterator.next();
						names.remove("a");
						iterator.next();//抛出ConcurrentModificationException异常
					  }
					}
					
					
			如何在遍历的同时安全地删除集合元素？
			
				源码之下无秘密
				
				
				public class Demo {
				  public static void main(String[] args) {
					List<String> names = new ArrayList<>();
					names.add("a");
					names.add("b");
					names.add("c");
					names.add("d");

					Iterator<String> iterator = names.iterator();
					iterator.next();
					iterator.remove();
					iterator.remove(); //报错，抛出IllegalStateException异常
				  }
				}	
				
				
				
				public class ArrayList<E> {
				  transient Object[] elementData;
				  private int size;

				  public Iterator<E> iterator() {
					return new Itr();
				  }

				  private class Itr implements Iterator<E> {
					int cursor;       // index of next element to return
					int lastRet = -1; // index of last element returned; -1 if no such
					int expectedModCount = modCount;

					Itr() {}

					public boolean hasNext() {
					  return cursor != size;
					}

					@SuppressWarnings("unchecked")
					public E next() {
					  checkForComodification();
					  int i = cursor;
					  if (i >= size)
						throw new NoSuchElementException();
					  Object[] elementData = ArrayList.this.elementData;
					  if (i >= elementData.length)
						throw new ConcurrentModificationException();
					  cursor = i + 1;
					  return (E) elementData[lastRet = i];
					}
					
					public void remove() {
					  if (lastRet < 0)
						throw new IllegalStateException();
					  checkForComodification();

					  try {
						ArrayList.this.remove(lastRet);
						cursor = lastRet;
						lastRet = -1;
						expectedModCount = modCount;
					  } catch (IndexOutOfBoundsException ex) {
						throw new ConcurrentModificationException();
					  }
					}
				  }
				}
				
				在上面的代码实现中，迭代器类新增了一个 lastRet 成员变量，用来记录游标指向的前一个元素。
				通过迭代器去删除这个元素的时候，我们可以更新迭代器中的游标和 lastRet 值，来保证不会因为删除元素而导致某个元素遍历不到。
				如果通过容器来删除元素，并且希望更新迭代器中的游标值来保证遍历不出错，我们就要维护这个容器都创建了哪些迭代器，每个迭代器是否还在使用等信息，代码实现就变得比较复杂了。
				
				
				
	如何设计实现一个支持“快照”功能的iterator？
			
			理解这个问题最关键的是理解“快照”两个字。
			
			所谓“快照”，指我们为容器创建迭代器的时候，相当于给容器拍了一张快照（Snapshot）
		
			
			解决方案一
				我们先来看最简单的一种解决办法。在迭代器类中定义一个成员变量 snapshot 来存储快照。
				每当创建迭代器的时候，都拷贝一份容器中的元素到快照中，后续的遍历操作都基于这个迭代器自己持有的快照来进行。
				
				
				这个解决方案虽然简单，但代价也有点高。每次创建迭代器的时候，都要拷贝一份数据到快照中，会增加内存的消耗。
				
				如果一个容器同时有多个迭代器在遍历元素，就会导致数据在内存中重复存储多份。
				
				不过，庆幸的是，Java 中的拷贝属于浅拷贝，也就是说，容器中的对象并非真的拷贝了多份，而只是拷贝了对象的引用而已。
				
				
				
				
			解决方案二
				
				MYSQL多版本并发
				
				。我们可以在 ArrayList 中存储两个数组。一个支持标记删除的，用来实现快照遍历功能；一个不支持标记删除的
				（也就是将要删除的数据直接从数组中移除），用来支持随机访问。对应的代码我这里就不给出了，感兴趣的话你可以自己实现一下。
				
				只掌握了知识，没锻炼能力，遇到实际的问题还是没法自己去分析、思考、解决。
				
				
				思考题：在今天讲的解决方案二中，删除元素只是被标记删除。被删除的元素即便在没有迭代器使用的情况下，也不会从数组中真正移除，这就会导致不必要的内存占用。针对这个问题，你有进一步优化的方法吗？
				
					参考MVCC，多版本并发控制，记录高水和低水，记录迭代器的开始时间，并且维护一个迭代器活跃表
					
					若活跃迭代器中最早开始时间都小于了记录的删除时间，则改记录可以删除
					
				在代码开发过程中，不可预期”比直接出错更加可怕
				