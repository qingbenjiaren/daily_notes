如何实现可灵活扩展算法的敏感信息过滤框架？

	职责链模式的原理和实现
	
		将请求的发送和接收解耦，让多个接收对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。
		
	在职责链模式中，多个处理器（也就是刚刚定义中说的“接收对象”）依次处理同一个请求。一个请求先经过 A 处理器处理，然后再把请求传递给 B 处理器，B 处理器处理完后再传递给 C 处理器，以此类推，形成一个链条。链条上的每个处理器各自承担各自的处理职责，所以叫作职责链模式。
	
	
	
		public abstract class Handler {
		  protected Handler successor = null;

		  public void setSuccessor(Handler successor) {
			this.successor = successor;
		  }

		  public abstract void handle();
		}

		public class HandlerA extends Handler {
		  @Override
		  public void handle() {
			boolean handled = false;
			//...
			if (!handled && successor != null) {
			  successor.handle();
			}
		  }
		}

		public class HandlerB extends Handler {
		  @Override
		  public void handle() {
			boolean handled = false;
			//...
			if (!handled && successor != null) {
			  successor.handle();
			} 
		  }
		}

		public class HandlerChain {
		  private Handler head = null;
		  private Handler tail = null;

		  public void addHandler(Handler handler) {
			handler.setSuccessor(null);

			if (head == null) {
			  head = handler;
			  tail = handler;
			  return;
			}

			tail.setSuccessor(handler);
			tail = handler;
		  }

		  public void handle() {
			if (head != null) {
			  head.handle();
			}
		  }
		}

		// 使用举例
		public class Application {
		  public static void main(String[] args) {
			HandlerChain chain = new HandlerChain();
			chain.addHandler(new HandlerA());
			chain.addHandler(new HandlerB());
			chain.handle();
		  }
		}
		
	对上面代码进行重构优化
	
		
		public abstract class Handler {
		  protected Handler successor = null;

		  public void setSuccessor(Handler successor) {
			this.successor = successor;
		  }

		  public final void handle() {
			boolean handled = doHandle();
			if (successor != null && !handled) {
			  successor.handle();
			}
		  }

		  protected abstract boolean doHandle();
		}

		public class HandlerA extends Handler {
		  @Override
		  protected boolean doHandle() {
			boolean handled = false;
			//...
			return handled;
		  }
		}

		public class HandlerB extends Handler {
		  @Override
		  protected boolean doHandle() {
			boolean handled = false;
			//...
			return handled;
		  }
		}

		// HandlerChain和Application代码不变
		
		
	第二种实现方式
		
		
		public interface IHandler {
		  boolean handle();
		}

		public class HandlerA implements IHandler {
		  @Override
		  public boolean handle() {
			boolean handled = false;
			//...
			return handled;
		  }
		}

		public class HandlerB implements IHandler {
		  @Override
		  public boolean handle() {
			boolean handled = false;
			//...
			return handled;
		  }
		}

		public class HandlerChain {
		  private List<IHandler> handlers = new ArrayList<>();

		  public void addHandler(IHandler handler) {
			this.handlers.add(handler);
		  }

		  public void handle() {
			for (IHandler handler : handlers) {
			  boolean handled = handler.handle();
			  if (handled) {
				break;
			  }
			}
		  }
		}

		// 使用举例
		public class Application {
		  public static void main(String[] args) {
			HandlerChain chain = new HandlerChain();
			chain.addHandler(new HandlerA());
			chain.addHandler(new HandlerB());
			chain.handle();
		  }
		}
		
	在 GoF 给出的定义中，如果处理器链上的某个处理器能够处理这个请求，那就不会继续往下传递请求。实际上，职责链模式还有一种变体，那就是请求会被所有的处理器都处理一遍，不存在中途终止的情况
	
	职责链模式的应用场景举例
	
	对于支持 UGC（User Generated Content，用户生成内容）的应用（比如论坛）来说，用户生成的内容（比如，在论坛中发表的帖子）可能会包含一些敏感词（比如涉黄、广告、反动等词汇）。针对这个应用场景，我们就可以利用职责链模式来过滤这些敏感词。
	
	对于包含敏感词的内容，我们有两种处理方式，一种是直接禁止发布，另一种是给敏感词打马赛克（比如，用 *** 替换敏感词）之后再发布。第一种处理方式符合 GoF 给出的职责链模式的定义，第二种处理方式是职责链模式的变体。
	
	
	
			public interface SensitiveWordFilter {
			  boolean doFilter(Content content);
			}

			public class SexyWordFilter implements SensitiveWordFilter {
			  @Override
			  public boolean doFilter(Content content) {
				boolean legal = true;
				//...
				return legal;
			  }
			}

			// PoliticalWordFilter、AdsWordFilter类代码结构与SexyWordFilter类似

			public class SensitiveWordFilterChain {
			  private List<SensitiveWordFilter> filters = new ArrayList<>();

			  public void addFilter(SensitiveWordFilter filter) {
				this.filters.add(filter);
			  }

			  // return true if content doesn't contain sensitive words.
			  public boolean filter(Content content) {
				for (SensitiveWordFilter filter : filters) {
				  if (!filter.doFilter(content)) {
					return false;
				  }
				}
				return true;
			  }
			}

			public class ApplicationDemo {
			  public static void main(String[] args) {
				SensitiveWordFilterChain filterChain = new SensitiveWordFilterChain();
				filterChain.addFilter(new AdsWordFilter());
				filterChain.addFilter(new SexyWordFilter());
				filterChain.addFilter(new PoliticalWordFilter());

				boolean legal = filterChain.filter(new Content());
				if (!legal) {
				  // 不发表
				} else {
				  // 发表
				}
			  }
			}
	
	开闭原则，提高代码的扩展性
	
	
	职责链模式如何应对代码的复杂性。
	
		将大块代码逻辑拆分成函数，将大类拆分成小类，是应对代码复杂性的常用方法。
		我们把各个敏感词过滤函数继续拆分出来，设计成独立的类
		
	职责链模式如何让代码满足开闭原则，提高代码的扩展性。
	
		要加入新的需求，就加入新的filter类就好了
	，细化一下的话，我们可以把上面的代码分成两类：框架代码和客户端代码。其中，ApplicationDemo 属于客户端代码，也就是使用框架的代码。除 ApplicationDemo 之外的代码属于敏感词过滤框架代码。
	
	
	设敏感词过滤框架并不是我们开发维护的，而是我们引入的一个第三方框架，我们要扩展一个新的过滤算法，不可能直接去修改框架的源码。这个时候，利用职责链模式就能达到开篇所说的，在不修改框架源码的情况下，基于职责链模式提供的扩展点，来扩展新的功能。换句话说，我们在框架这个代码范围内实现了开闭原则。
	
	
	
框架中常用的过滤器、拦截器是如何实现的？

	职责链模式最常用来开发框架的过滤器和拦截器
	
	
	Servlet Filter
	
		public class LogFilter implements Filter {
		  @Override
		  public void init(FilterConfig filterConfig) throws ServletException {
			// 在创建Filter时自动调用，
			// 其中filterConfig包含这个Filter的配置参数，比如name之类的（从配置文件中读取的）
		  }

		  @Override
		  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
			System.out.println("拦截客户端发送来的请求.");
			chain.doFilter(request, response);
			System.out.println("拦截发送给客户端的响应.");
		  }

		  @Override
		  public void destroy() {
			// 在销毁Filter时自动调用
		  }
		}

		// 在web.xml配置文件中如下配置：
		<filter>
		  <filter-name>logFilter</filter-name>
		  <filter-class>com.xzg.cd.LogFilter</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>logFilter</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>
		
	Servlet 只是一个规范，并不包含具体的实现，所以，Servlet 中的 FilterChain 只是一个接口定义。具体的实现类由遵从 Servlet 规范的 Web 容器来提供，比如，ApplicationFilterChain 类就是 Tomcat 提供的 FilterChain 的实现类，源码如下所示。
	
	
	
		public final class ApplicationFilterChain implements FilterChain {
		  private int pos = 0; //当前执行到了哪个filter
		  private int n; //filter的个数
		  private ApplicationFilterConfig[] filters;
		  private Servlet servlet;
		  
		  @Override
		  public void doFilter(ServletRequest request, ServletResponse response) {
			if (pos < n) {
			  ApplicationFilterConfig filterConfig = filters[pos++];
			  Filter filter = filterConfig.getFilter();
			  filter.doFilter(request, response, this);
			} else {
			  // filter都处理完毕后，执行servlet
			  servlet.service(request, response);
			}
		  }
		  
		  public void addFilter(ApplicationFilterConfig filterConfig) {
			for (ApplicationFilterConfig filter:filters)
			  if (filter==filterConfig)
				 return;

			if (n == filters.length) {//扩容
			  ApplicationFilterConfig[] newFilters = new ApplicationFilterConfig[n + INCREMENT];
			  System.arraycopy(filters, 0, newFilters, 0, n);
			  filters = newFilters;
			}
			filters[n++] = filterConfig;
		  }
		}

		改进一下：
		
			
			  @Override
			  public void doFilter(ServletRequest request, ServletResponse response) {
				if (pos < n) {
				  ApplicationFilterConfig filterConfig = filters[pos++];
				  Filter filter = filterConfig.getFilter();
				  //filter.doFilter(request, response, this);
				  //把filter.doFilter的代码实现展开替换到这里
				  System.out.println("拦截客户端发送来的请求.");
				  chain.doFilter(request, response); // chain就是this
				  System.out.println("拦截发送给客户端的响应.")
				} else {
				  // filter都处理完毕后，执行servlet
				  servlet.service(request, response);
				}
			  }
		这样实现主要是为了在一个 doFilter() 方法中，支持双向拦截，既能拦截客户端发送来的请求，也能拦截发送给客户端的响应，
	
	
	
	Spring Interceptor
		Spring Interceptor，翻译成中文就是拦截器
		
		Servlet Filter和Spring Interceptor尽管英文单词和中文翻译都不同，
		但这两者基本上可以看作一个概念，都用来实现对 HTTP 请求进行拦截处理。
		
		它们不同之处在于，Servlet Filter 是 Servlet 规范的一部分，实现依赖于 Web 容器。
		Spring Interceptor 是 Spring MVC 框架的一部分，由 Spring MVC 框架来提供实现
		
		客户端发送的请求，会先经过 Servlet Filter，然后再经过 Spring Interceptor，最后到达具体的业务代码中。我画了一张图来阐述一个请求的处理流程，具体如下所示
		
		LogInterceptor 实现的功能跟刚才的 LogFilter 完全相同，只是实现方式上稍有区别。LogFilter 对请求和响应的拦截是在 doFilter() 一个函数中实现的，而 LogInterceptor 对请求的拦截在 preHandle() 中实现，对响应的拦截在 postHandle() 中实现。
		
		
		
		
			public class LogInterceptor implements HandlerInterceptor {

			  @Override
			  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
				System.out.println("拦截客户端发送来的请求.");
				return true; // 继续后续的处理
			  }

			  @Override
			  public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
				System.out.println("拦截发送给客户端的响应.");
			  }

			  @Override
			  public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
				System.out.println("这里总是被执行.");
			  }
			}

			//在Spring MVC配置文件中配置interceptors
			<mvc:interceptors>
			   <mvc:interceptor>
				   <mvc:mapping path="/*"/>
				   <bean class="com.xzg.cd.LogInterceptor" />
			   </mvc:interceptor>
			</mvc:interceptors>
	
	
	基于职责链模式实现的。其中，HandlerExecutionChain 类是职责链模式中的处理器链。它的实现相较于 Tomcat 中的 ApplicationFilterChain 来说，逻辑更加清晰，不需要使用递归来实现，主要是因为它将请求和响应的拦截工作，拆分到了两个函数中实现。HandlerExecutionChain 的源码如下所示，同样，我对代码也进行了一些简化，只保留了关键代码。
	
	
	
		public class HandlerExecutionChain {
		 private final Object handler;
		 private HandlerInterceptor[] interceptors;
		 
		 public void addInterceptor(HandlerInterceptor interceptor) {
		  initInterceptorList().add(interceptor);
		 }

		 boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {
		  HandlerInterceptor[] interceptors = getInterceptors();
		  if (!ObjectUtils.isEmpty(interceptors)) {
		   for (int i = 0; i < interceptors.length; i++) {
			HandlerInterceptor interceptor = interceptors[i];
			if (!interceptor.preHandle(request, response, this.handler)) {
			 triggerAfterCompletion(request, response, null);
			 return false;
			}
		   }
		  }
		  return true;
		 }

		 void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {
		  HandlerInterceptor[] interceptors = getInterceptors();
		  if (!ObjectUtils.isEmpty(interceptors)) {
		   for (int i = interceptors.length - 1; i >= 0; i--) {
			HandlerInterceptor interceptor = interceptors[i];
			interceptor.postHandle(request, response, this.handler, mv);
		   }
		  }
		 }

		 void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)
		   throws Exception {
		  HandlerInterceptor[] interceptors = getInterceptors();
		  if (!ObjectUtils.isEmpty(interceptors)) {
		   for (int i = this.interceptorIndex; i >= 0; i--) {
			HandlerInterceptor interceptor = interceptors[i];
			try {
			 interceptor.afterCompletion(request, response, this.handler, ex);
			} catch (Throwable ex2) {
			 logger.error("HandlerInterceptor.afterCompletion threw exception", ex2);
			}
		   }
		  }
		 }
		}
		

		在 Spring 框架中，DispatcherServlet 的 doDispatch() 方法来分发请求，它在真正的业务逻辑执行前后，执行 HandlerExecutionChain 中的 applyPreHandle() 和 applyPostHandle() 函数，用来实现拦截的功能。具体的代码实现很简单，你自己应该能脑补出来，这里就不罗列了。感兴趣的话，你可以自行去查看。
		
		
		
		职责链模式常用在框架开发中，用来实现框架的过滤器、拦截器功能，让框架的使用者在不需要修改框架源码的情况下，添加新的过滤拦截功能。这也体现了之前讲到的对扩展开放、对修改关闭的设计原则。
		
		
		在实际的项目开发中，我们可以利用 AOP 来实现访问控制功能，比如鉴权、限流、日志等。今天我们又讲到，Servlet Filter、Spring Interceptor 也可以用来实现访问控制。那在项目开发中，类似权限这样的访问控制功能，我们该选择三者（AOP、Servlet Filter、Spring Interceptor）中的哪个来实现呢？有什么参考标准吗？
		
		
		Filter使用的是Servlet提供的规范，web容器（tomcat）提供的调度处理
		Spring intercepter 是spring提供的，在请求分发阶段进行拦截
		AOP是对程序代码进行增强，可以灵活的添加额外的功能
		