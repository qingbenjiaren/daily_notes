Unix 从 1969 年诞生，一直演进至今，代码量有几百万行，如此庞大的项目开发，能够如此完美的协作开发，并且长期维护，保持足够的代码质量，这里面有很多成功的经验可以借鉴。所以，接下来，我们就以 Unix 开源项目的开发为引子，分三节课的时间，通过下面三个话题，详细地讲讲应对复杂软件开发的方法论。希望这些经验能为你所用，在今后面对复杂项目开发的时候，能让你有条不紊、有章可循地从容应对。

从设计原则和思想的角度来看，如何应对庞大而复杂的项目开发？

从研发管理和开发技巧的角度来看，如何应对庞大而复杂的项目开发？

聚焦在 Code Review 上来看，如何通过 Code Reviwe 保持项目的代码质量？

封装与抽象

	在 Unix、Linux 系统中，有一句经典的话，“Everything is a file”，实际上，“一切皆文件”就体现了封装和抽象的设计思想。
	
	封装了不同类型设备的访问细节，抽象为统一的文件访问方式，更高层的代码就能基于统一的访问方式，来访问底层不同类型的设备。
	
	这样做的好处是，隔离底层设备访问的复杂性。统一的访问方式能够简化上层代码的编写，并且代码更容易复用。
	
	
分层与模块化
    Unix、Linux 等大型系统之所以能做到几百、上千人有条不紊地协作开发，也归功于模块化做得好。
	
	我们常说，计算机领域的任何问题都可以通过增加一个间接的中间层来解决，这本身就体现了分层的重要性。
	
	Unix 系统也是基于分层开发的，它可以大致上分为三层，分别是内核、系统调用、应用层。
	
	每一层都对上层封装实现细节，暴露抽象的接口来调用。
	
	而且，任意一层都可以被重新实现，不会影响到其他层的代码。
	
基于接口通信
	
	Unix 系统提供的 open() 文件操作函数，底层实现非常复杂，涉及权限控制、并发控制、物理存储，但我们用起来却非常简单
	
	除此之外，因为 open() 函数基于抽象而非具体的实现来定义，所以我们在改动 open() 函数的底层实现的时候，并不需要改动依赖它的上层代码。
	

高内聚松耦合
	
	让我们在修改或者阅读代码的时候，聚集到在一个小范围的模块或者类中
	
	各设计原则都是相辅相成的，只是关注的唯独不一样
	
为扩展而设计
	
	开闭原则
	
	基于扩展而非修改来添加新功能，最小化、集中化代码改动，避免新代码影响到老代码，降低引入 bug 的风险。
	

KISS 首要原则
	
	简单清晰、可读性好，是任何大型软件开发要遵循的首要原则。
	
	只要可读性好，即便扩展性不好，顶多就是多花点时间、多改动几行代码的事情。
	
	如果你对现有代码的逻辑似懂非懂，抱着尝试的心态去修改代码，引入 bug 的可能性就会很大。
	
	
	在扩展性和可读性有冲突的时候，或者在两者之间权衡，模棱两可的时候，应该选择遵循 KISS 原则，首选可读性。
	

最小惊奇原则
	
	《Unix 编程艺术》一书中提到一个 Unix 的经典设计原则，叫“最小惊奇原则”，英文是“The Least Surprise Principle”
	
	实际上，这个原则等同于“遵守开发规范”，意思是，在做设计或者编码的时候要遵守统一的开发规范，避免反直觉的设计。
	
	遵从统一的编码规范，所有的代码都像一个人写出来的
	
	
如何应对大型复杂项目开发
	
	重视代码质量。
	
	导致代码质量不高的原因有很多，比如：代码无注释，无文档，命名差，层次结构不清晰，调用关系混乱，到处 hardcode，充斥着各种临时解决方案等等。
	
研发管理和开发技巧的方法论

	吹毛求疵般地执行编码规范
		严格执行代码规范，可以使一个项目乃至整个公司的代码具有完全统一的风格，就像同一个人编写的。
		
		在 Code Review 时，我们一定要严格要求，看到不符合规范的代码，一定要指出并要求修改。
		
		细节决定成败，代码规范的严格执行极为关键。
		
	编写高质量的单元测试
	
		IF  I WILL
		
	不流于形式的code review
		
		不能虎头蛇尾
		
		不能否定code review 的作用
		
		关键是执行到位
		
	开发未动，文档现行
		
		在开发某个系统或者重要模块或者功能之前，我们应该先写技术文档，然后，发送给同组或者相关同事审查，在审查没有问题的情况下再开发
		
		当开发完成之后，进行 Code Review 的时候，代码审查者通过阅读开发文档，也可以快速理解代码。
		
		除此之外，对于团队和公司来讲，文档是重要的财富。
		
		作为一个规范化的技术团队，技术文档是一种摒弃作坊式开发和个人英雄主义的有效方法，是保证团队有效协作的途径。
		
		
	持续重构、重构、重构
		持续的小重构是非常重要的
		
		不要等到问题堆得太多了再去解决
	
	
	对项目与团队进行拆分
	
	
	
	
	一句话总结一下：切忌敏于言而讷于行。
	

铮哥：Code Review 之布道
	
为什么如此强调Code Review

	Code Review 践行"三人行必有我师"
	
		Code Review目的不全是找问题，这个你懂的
		另外永远不要觉得自己很厉害，只要经过不停的推敲，都有持续改进的空间
		
	Code Review能摒弃“个人英雄主义”
	
		如果一个人默默地写代码提交，不经过团队的 Review，这样的代码蕴含的是一个人的智慧。
		
		优秀的产品为什么要开源，集思广益
	
	Code Review能有效提高代码可读性
	
		自己看自己的代码总会觉得很易读，but
		
		
	Code Review 是技术传帮带的有效途径
	
	Code Review保证代码不止一个人熟悉
	
	Code Review能打造良好的技术氛围
	
	Code Review是一种技术沟通方式
		
		公司高手review了我的代码，这对于我来说也是获益匪浅
		
		Talk is cheap，show me the code
		
		今天白天写的代码，明天来上班的时候，跨时区的同事已经帮我 Review 好了，我就可以改改提交，继续写新的代码了。这样的协作效率会很高。
		
		
		
	Code Review 能提高团队自律性
	
		
		Code Review 相当于一次代码直播，曝光 dirty code，有一定的威慑力。
	
如何在团队中落地执行Code Review
	
	有人认为，Code Review 流程太长，太浪费时间，特别是工期紧的时候，今天改的代码，明天就要上，如果要等同事 Review，同事有可能没时间，这样就来不及。这个时候该怎么办呢？
	
	工期都是人排的，稍微排松点就行了啊。
	
	关键是公司对code review的重视程度，或者团队Code Review的重视程度
	

	Code Review 践行“三人行必有我师”、能摒弃“个人英雄主义”、能有效提高代码可读性、是技术传帮带的有效途径、能保证代码不止一个人熟悉、能打造良好的技术氛围、是一种技术沟通方式、能提高团队的自律性。
	
	Google 的 Code Review 非常严格，多一个空行，多一个空格，注释有拼错的单词，变量命名得不够好，都会被指出来要求修改。之所以如此吹毛求疵，并非矫枉过正，而是要给大家传递一个信息：代码质量非常重要，一点都不能马虎。
	
	
		
	
	
	