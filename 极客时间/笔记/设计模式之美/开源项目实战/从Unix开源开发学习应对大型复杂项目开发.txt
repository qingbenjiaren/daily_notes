Unix 从 1969 年诞生，一直演进至今，代码量有几百万行，如此庞大的项目开发，能够如此完美的协作开发，并且长期维护，保持足够的代码质量，这里面有很多成功的经验可以借鉴。所以，接下来，我们就以 Unix 开源项目的开发为引子，分三节课的时间，通过下面三个话题，详细地讲讲应对复杂软件开发的方法论。希望这些经验能为你所用，在今后面对复杂项目开发的时候，能让你有条不紊、有章可循地从容应对。

从设计原则和思想的角度来看，如何应对庞大而复杂的项目开发？

从研发管理和开发技巧的角度来看，如何应对庞大而复杂的项目开发？

聚焦在 Code Review 上来看，如何通过 Code Reviwe 保持项目的代码质量？

封装与抽象

	在 Unix、Linux 系统中，有一句经典的话，“Everything is a file”，实际上，“一切皆文件”就体现了封装和抽象的设计思想。
	
	封装了不同类型设备的访问细节，抽象为统一的文件访问方式，更高层的代码就能基于统一的访问方式，来访问底层不同类型的设备。
	
	这样做的好处是，隔离底层设备访问的复杂性。统一的访问方式能够简化上层代码的编写，并且代码更容易复用。
	
	