抽象类

	抽象类不允许被实例化，只能被继承。也就是说，你不能 new 一个抽象类的对象出来（Logger logger = new Logger(…); 会报编译错误）。
	抽象类可以包含属性和方法。方法既可以包含代码实现（比如 Logger 中的 log() 方法），也可以不包含代码实现（比如 Logger 中的 doLog() 方法）。不包含代码实现的方法叫作抽象方法。
	子类继承抽象类，必须实现抽象类中的所有抽象方法。对应到例子代码中就是，所有继承 Logger 抽象类的子类，都必须重写 doLog() 方法。
	
接口
	接口不能包含属性（也就是成员变量）。
	接口只能声明方法，方法不能包含代码实现。
	类实现接口的时候，必须实现接口中声明的所有方法。
	
	
为什么需要抽象类？它能够解决什么编程问题？

	若没有抽象方法又要实现多态
		//ONE	
		Logger logger = new XXXXLogger();
		logger.log();
		//TWO
		Logger logger = new ZZZZLogger();
		logger.log();
		
	只能在父类Logger上写一个空方法，这样会影响代码的可读性。如果不了解logger背后的设计，
	代码注释又不怎么给力，我们在阅读代码时就可能对为什么定义一个空的log方法而感到疑惑，
	需要查看Logger、FileLogger、MXXXXX之间的继承关系，才能弄明白设计意图。
	
	当创建一个新的子类继承Logger父类时，我们有可能忘记重新实现log方法，抽象类会强制
	
	Logger可以被实例化，换句话说，我们可以new一个Logger出来，并且调用空的log()方法。这
	也增加了子类被无用的风险。
	