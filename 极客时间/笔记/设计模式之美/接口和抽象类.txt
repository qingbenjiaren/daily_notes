抽象类

	抽象类不允许被实例化，只能被继承。也就是说，你不能 new 一个抽象类的对象出来（Logger logger = new Logger(…); 会报编译错误）。
	抽象类可以包含属性和方法。方法既可以包含代码实现（比如 Logger 中的 log() 方法），也可以不包含代码实现（比如 Logger 中的 doLog() 方法）。不包含代码实现的方法叫作抽象方法。
	子类继承抽象类，必须实现抽象类中的所有抽象方法。对应到例子代码中就是，所有继承 Logger 抽象类的子类，都必须重写 doLog() 方法。
	
接口
	接口不能包含属性（也就是成员变量）。
	接口只能声明方法，方法不能包含代码实现。
	类实现接口的时候，必须实现接口中声明的所有方法。
	
	
为什么需要抽象类？它能够解决什么编程问题？

	若没有抽象方法又要实现多态
		//ONE	
		Logger logger = new XXXXLogger();
		logger.log();
		//TWO
		Logger logger = new ZZZZLogger();
		logger.log();
		
	只能在父类Logger上写一个空方法，这样会影响代码的可读性。如果不了解logger背后的设计，
	代码注释又不怎么给力，我们在阅读代码时就可能对为什么定义一个空的log方法而感到疑惑，
	需要查看Logger、FileLogger、MXXXXX之间的继承关系，才能弄明白设计意图。
	
	当创建一个新的子类继承Logger父类时，我们有可能忘记重新实现log方法，抽象类会强制
	
	Logger可以被实例化，换句话说，我们可以new一个Logger出来，并且调用空的log()方法。这
	也增加了子类被无用的风险。
	
为什么要使用接口？它能够解决什么问题
	
	抽象类更多的是为了代码复用，而接口就更侧重于解耦。
	

从类的继承层次上来看，抽象类是一种自下而上的设计思路，先有子类的代码重复，然后再抽象成上层的父类。而接口正好相反，它是一种自上而下的设计思路。我们在编程的时候，一般都是先设计接口，再考虑具体的实现。

抽象类和接口的语法特性
	
	抽象类不允许被实例化，只能被继承。
	它可以包含属性和方法。
	方法既可以包含代码实现，也可以不包含代码实现。不包含代码实现的方法叫作抽象方法。
	子类继承抽象类，必须实现抽象类中的所有抽象方法。
	接口不能包含属性，只能声明方法，方法不能包含代码实现
	类实现接口的时候，必须实现接口中声明的所有方法。
	
抽象类和接口存在的意义
	抽象类为了解决代码复用问题。接口解决解耦问题，隔离接口和具体实现，提高代码的扩展性
	
抽象类和接口的应用场景区别
	如果要表示一种 is-a 的关系，并且是为了解决代码复用问题，我们就用抽象类；
	如果要表示一种 has-a 关系，并且是为了解决抽象而非代码复用问题，那我们就用接口。课堂讨论
	
	
	
	

	
	
	