对于一个工程师来说，如果要追求长远发展，你就不能一直只把自己放在执行者的角色，不
能只是一个代码实现者，你还要有独立负责一个系统的能力，能端到端（end to end）开
发一个完整的系统。这其中的工作就包括：前期的需求沟通分析、中期的代码设计实现、后
期的系统上线维护等。



积分兑换系统
	需求分析：
		技术人员应该更多地参与到产品设计中
		Google 工程师跟其他公司工程师有一个很大区别，那就是大部分人都具备产品思维，并不是完全的“技术控”
		
		
		作为技术人，我该怎么做产品设计呢？
		
			首先，一定不要自己一个人闷头想。一方面，这样做很难想全面
			
			另一方面，从零开始设计也比较浪费时间。所以，我们要学会“借鉴”。
			
			爱因斯坦说过，“创造的一大秘诀是要懂得如何隐藏你的来源”。
			
		    我们可以找几个类似的产品，比如淘宝，看看它们是如何设计积分系统的，然后借鉴到我们的产品中
			
			笼统地来讲，积分系统无外乎就两个大的功能点，一个是赚取积分，另一个是消费积分。
			
			赚积分的功能
			
			消费积分的功能
			
			
			产品线的线框图，用户用例
			
			有关积分有效期的用户用例，我们可以进行如下的设计：
			
				用户在获取积分的时候，会告知积分的有效期；
				用户在使用积分的时候，会优先使用快过期的积分；
				用户在查询积分明细的时候，会显示积分的有效期和状态（是否过期）；
				用户在查询总可用积分的时候，会排除掉过期的积分。
			
			积分赚取和兑换规则
			
			积分消费和兑换规则
			
			积分及其明细查询
			
	系统设计
		面向对象设计聚焦在代码层面（主要是针对类），那系统设计就是聚焦在架构层面（主要是针对模块），两者有很多相似之处。
		
		
	业务系统本身的设计无外乎有这样三方面的工作要做：
		接口设计
		数据库设计
		业务模型设计
	
	
	面向对象设计的本质就是把合适的代码放到合适的类中。合理地划分代码可以实现代码的高内聚、低耦合，类与类之间的交互简单清晰，代码整体结构一目了然。类比面向对象设计，系统设计实际上就是将合适的功能放到合适的模块中。合理地划分模块也可以做到模块层面的高内聚、低耦合，架构整洁清晰。在面向对象设计中，类设计好之后，我们需要设计类之间的交互关系。类比到系统设计，系统职责划分好之后，接下来就是设计系统之间的交互了。
	
	
	我们在设计接口和数据库的时候，一定要多花点心思和时间，切不可过于随意
	
	为了兼顾易用性和性能，我们可以借鉴 facade（外观）设计模式，在职责单一的细粒度接口之上，再封装一层粗粒度的接口给外部使用。
	
	为什么要使用MVC
	
		分层起到代码复用的作用
		
		分层能起到隔离变化
			基于接口编程
		
		分层能起到隔离关注点的作用
		
		分层能提高代码的可测试性
		
		分层能应对系统的复杂性
		
		
		
		BO  VO  Entity存在的意义是什么？
			
			VO、BO、Entity 并非完全一样。比如，我们可以在 UserEntity、UserBo 中定义 Password 字段，但显然不能在 UserVo 中定义 Password 字段，否则就会将用户的密码暴露出去。
			
			VO、BO、Entity 三个类虽然代码重复，但功能语义不重复，从职责上讲是不一样的。所以，也并不能算违背 DRY 原则。在前面讲到 DRY 原则的时候，针对这种情况，如果合并为同一个类，那也会存在后期因为需求的变化而需要再拆分的问题。
			
			为了尽量减少每层之间的耦合，把职责边界划分明确，每层都会维护自己的数据对象，层与层之间通过接口交互。数据从下一层传递到上一层的时候，将下一层的数据对象转化成上一层的数据对象，再继续处理。虽然这样的设计稍微有些繁琐，每层都需要定义各自的数据对象，需要做数据对象之间的转化，但是分层清晰。对于非常大的项目来说，结构清晰是第一位的！
			
		
		既然 VO、BO、Entity 不能合并，那如何解决代码重复的问题呢？		
		
			继承可以解决代码重复问题。我们可以将公共的字段定义在父类中，让 VO、BO、Entity 都继承这个父类，各自只定义特有的字段。
			
		代码重复问题解决了，那不同分层之间的数据对象该如何互相转化呢？

			Java 中提供了多种数据对象转化工具，比如 BeanUtils、Dozer 等
			
			也可以借鉴 Java 这些工具类的设计思路，自己在项目中实现对象转化工具类
			
		VO、BO、Entity 都是基于贫血模型的，而且为了兼容框架或开发库（比如 MyBatis、Dozer、BeanUtils），我们还需要定义每个字段的 set 方法。这些都违背 OOP 的封装特性，会导致数据被随意修改。那到底该怎么办好呢？
		
			前面我们也提到过，Entity 和 VO 的生命周期是有限的，都仅限在本层范围内。而对应的 Repository 层和 Controller 层也都不包含太多业务逻辑，所以也不会有太多代码随意修改数据，即便设计成贫血、定义每个字段的 set 方法，相对来说也是安全的。
			
			不过，Service 层包含比较多的业务逻辑代码，所以 BO 就存在被任意修改的风险了。但是，设计的问题本身就没有最优解，只有权衡。为了使用方便，我们只能做一些妥协，放弃 BO 的封装特性，由程序员自己来负责这些数据对象的不被错误使用。
			
		
	总结用到的设计原则和思想
	
		高内聚、松耦合
		
		单一职责原则
		
		依赖注入
			下层的类，依靠依赖注入到上层的类中
		依赖反转原则
		
		基于接口而非实现编程
		
		封装、抽象
		
		DRY与继承的组合
		
			系统设计的过程可以参照面向对象设计的步骤来做。面向对象设计本质是将合适的代
			码放到合适的类中。系统设计是将合适的功能放到合适的模块中
			
		
		注意一个问题，虽然代码重复，但是语义不重复也不算违反dry原则

		
		
		总结用到的设计原则和思想
		
			从表面上看，做业务开发可能并不是特别有技术挑战，但是实际上，如果你要做到知其然知其所以然，做到透彻理解、真的懂，并不是件容易的事情。深挖一下，你会发现这其中还是蕴含了很多设计原则、思想和模式的。
			
			
		
		脱离业务场景的架构都是耍流氓
		在软甲架构的时候不要一味的追求设计模式，应该充分考虑业务场景
		比如设计积分系统时，按设计原则，下层系统不要包含太多上层系统的业务信息
		但是我们在积分明细表中需要添加：event_id，channel_id 这些跟上层业务相关的字段
		这样设计是为后期必要的查询统计做铺垫，简化统计逻辑，
		如果不记录在这张表中，就要记录在其他表中，或者查询不便，或者破坏内聚。
		
		
	