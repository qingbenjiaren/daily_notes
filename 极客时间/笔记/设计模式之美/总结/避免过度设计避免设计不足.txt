千万别手里拿着锤子就看什么都是钉子啊。
	
	设计的初衷是提高代码质量
	
		初心，“初心”一般都不会随便改，多想想初心
		
		应用设计模式只是方法，最终的目的，也就是初心，是提高代码的质量
		
		提高代码的可读性、可扩展性、可维护性等
		
		设计原则和思想是心法，设计模式只是招式
		
	
	设计的过程是先有问题后有方案
		
		痛点
			可读性不好
			可扩展性不好
			可维护性不好
		
		需求
			针对性的改善
		
		我们先要去分析代码存在的痛点，比如可读性不好、可扩展性不好等等，
		然后再针对性地利用设计模式去改善，而不是看到某个场景之后，
		觉得跟之前在某本书中看到的某个设计模式的应用场景很相似，
		就套用上去，也不考虑到底合不合适，最后如果有人问起了，就再找几个不痛不痒、
		很不具体的伪需求来搪塞，比如提高了代码的扩展性、满足了开闭原则等等。
		
		实际上还是需要实事求是
		
		不能拿原理当真理，你分青红皂白直接套用
		
		无知地炫技
		
		半瓶子不满
		
		过度设计被别人鄙视
		
		最重要的是分析问题、解决问题的能力
		
		看到某段代码之后，你就能够自己分析得头头是道，说出它好的地方、不好的地方，为什么好、为什么不好，不好的如何改善，可以应用哪种设计模式，应用了之后有哪些副作用要控制等等。
		
	
	设计的应用场景是复杂代码
		
		用复杂的设计模式去解决简单的问题，还振振有词地说某某经典书中就是这么写的。在我看来，这是很多初学者因为缺乏经验，在学完设计模式之后，在项目中过度设计的首要原因。
		
		设计模式要干的事情就是解耦，也就是利用更好的代码结构将一大坨代码拆分成职责更单一的小类，让其满足高内聚低耦合等特性。
		
		创建型模式是将创建和使用代码解耦，结构型模式是将不同的功能代码解耦，行为型模式是将不同的行为代码解耦。
		
		而解耦的主要目的是应对代码的复杂性。设计模式就是为了解决复杂代码问题而产生的。
		
		对于复杂代码，比如项目代码量多、开发周期长、参与开发的人员多，我们前期要多花点时间在设计上，越是复杂代码，花在设计上的时间就要越多。
		
		一直review
		
	
	持续重构能有效避免过度设计
	
		我非常推崇持续重构的开发方法。持续重构不仅仅是保证代码质量的重要手段，也是避免过度设计的有效方法。
		
		当对要不要应用某种设计模式感到模棱两可的时候，你可以思考一下，如果暂时不用这种设计模式，随着代码的演进，当某一天不得不去使用它的时候，重构的代码是否很大
		
		
避免设计不足3个必要条件
	
	理论知识的储备。
	
		熟练掌握各种设计原则、思想、编码规范、设计模式。
	
		理论知识是解决问题的工具，是前人智慧的结晶。
	
	一定的刻意训练
	
		理论知识都学过，但是很容易忘记，遇到问题也想不到对应的知识点。
	
	一定要有代码质量意识、设计意识。
	
不要脱离具体的场景去谈设计
	设计是一个非常主观的事情，不夸张地讲，可以称之为一门“艺术”。
	
	这就像我们经常说的，脱离业务谈架构都是“耍流氓”。
	
	对于需要尽快上市占领市场的项目，往往前期不会花太多的时间在代码设计、代码质量上
	
	相反，如果你开发的是 MMORPG 大型端游，一般都要投资上亿资金，几百号人开发好几年，推倒重来的成本很大。
	这个时候，代码质量就非常关键了。前期就要多花点时间在设计上，否则，代码质量太差，bug 太多，后期无法维护，也会导致很多用户弃而选择同类型的其他家的游戏。
	
	再比如，如果我们开发的是偏底层的、框架类的、通用的代码，那代码质量就比较重要，因为一旦出现问题或者代码改动，影响面就比较大。
	
	相反，如果我们开发的是业务系统或者不需要长期维护的项目，那稍微放低点代码质量的要求，也是没问题的
	
		
		