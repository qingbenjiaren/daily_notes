命名与注释（Naming and Comments）
	
	命名（重视，推敲，github搜索）
		
		
		
		命名多长合适
			
			尽管长的命名可以包含更多的信息，更能准确直观地表达意图，但是，如果函数、变量的命名很长，那由它们组成的语句就会很长。在代码列长度有限制的情况下，就会经常出现一条语句被分割成两行的情况，这其实会影响代码可读性。
			
			一方面能让命名短一些，另一方面又不影响阅读理解，比如，sec 表示 second、str 表示 string、num 表示 number、doc 表示 document。
			
			总之，命名的一个原则就是以能准确达意为目标。不过，对于代码的编写者来说，自己对代码的逻辑很清楚，总感觉用什么样的命名都可以达意，实际上，对于不熟悉你代码的同事来讲，可能就不这么认为了。所以，命名的时候，我们一定要学会换位思考，假设自己不熟悉这块代码，从代码阅读者的角度去考量命名是否足够直观。
		

		利用上下文简化命名
		
		命名要可读、可搜索
		
		如何命名接口和抽象类？
			
			接口：
				一种是加前缀“I”，表示一个 Interface。比如 IUserService，对应的实现类命名为 UserService。另一种是不加前缀，比如 UserService，对应的实现类加后缀“Impl”，比如 UserServiceImpl。
				
			抽象类：
			
	
	
	注释
		
		注释到底该写什么？
		
			注释的内容主要包含这样三个方面：做什么、为什么、怎么做。
		
			注释比代码承载的信息更多
		
			注释起到总结性作用、文档的作用
		
			一些总结性注释能让代码结构更清晰
		
		注释是不是越多越好？
		
			合适


代码风格
		
	类、函数多大才合适
		函数不超过50个
		
		类自己把握
		
	一行代码多长合适
	
		一行代码最长限制为 100 个字符
		
		一行代码最长不能超过 IDE 显示的宽度。
		
	善于用空行分割单元块


	缩进
		java语言适合2格缩进，不过要与项目内部统一
		
		不能用tab缩进，使用空格，因为不同的IDEtab代表的空格数不同
	
	大括号是否要另起一行
		
		跟随项目统一
		
	类中成员的排列顺序
		
		成员变量之间，先静态再普通，作用于从public到protected到private
		
		
编程技巧
	
	把代码分割成更小的单元块
		把复杂的逻辑封装成函数
		
	避免函数参数过多
		函数包含 3、4 个参数的时候还是能接受的，大于等于 5 个的时候，我们就觉得参数有点过多了
		
		考虑函数是否职责单一，是否能通过拆分成多个函数的方式来减少参数
		
		将函数的参数封装成对象。
		
	勿用函数参数来控制逻辑(拆分)
		
			不要在函数中使用布尔类型的标识参数来控制内部逻辑
			
			根据参数是否为 null
			
	函数设计要职责单一
		
		
	移除过深的嵌套层次
			嵌套最好不超过两层
			
			去掉多余的 if 或 else 语句。代码示例如下所示
			
			使用编程语言提供的 continue、break、return 关键字，提前退出嵌套。
		
			调整执行顺序来减少嵌套
		
			将部分嵌套逻辑封装成函数调用
			
			常用的还有通过使用多态来替代 if-else、switch-case 条件判断的方法
			
	学会使用解释性变量
	
		常量取代魔法数字
		
		使用解释性变量来解释复杂表达式