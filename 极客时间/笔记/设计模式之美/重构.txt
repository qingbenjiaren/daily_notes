重构代码对一个工程师能力的要求，要比单纯写代码高得多。重构需要你能洞察出代码存在的坏味道或者设计上的不足，并且能合理、熟练地利用设计思想、原则、模式、编程规范等理论知识解决这些问题。

重构
	重构的目的（why）、对象（what）、时机（when）、方法（how）；
	
	保证重构不出错的手段
	
	不同规模的重构，重点讲解大规模高层次重构（比如系统、模块、代码结构、类与类之间的交互等的重构）和小规模低层次重构（类、函数、变量等的重构）
	
	
	重构的目的：
		重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。
		
		在保持功能不变的前提下，利用设计思想、原则、模式、编程规范等理论来优化代码，修改设计上的不足，提高代码质量。
		
		重构是时刻保证代码质量的一个极其有效的手段，不至于让代码腐化到无可救药的地步。
		
		优秀的代码或架构不是一开始就能完全设计好的，就像优秀的公司和产品也都是迭代出来的。我们无法 100% 遇见未来的需求，也没有足够的精力、时间、资源为遥远的未来买单，所以，随着系统的演进，重构代码也是不可避免的。
		
		最后，重构是避免过度设计的有效手段。在我们维护代码的过程中，真正遇到问题的时候，再对代码进行重构，能有效避免前期投入太多时间做过度的设计，做到有的放矢
		
		初级工程师在维护代码，高级工程师在设计代码，资深工程师在重构代码
		
	
	重构的对象：到底重构什么（what）？
		
		大型重构
			型重构指的是对顶层代码设计的重构，包括：系统、模块、代码结构、类与类之间的关系等的重构
			重构的手段有：分层、模块化、解耦、抽象可复用组件等等
			
		小型重构
			
			小型重构指的是对代码细节的重构，主要是针对类、函数、变量等代码级别的重构
			
			比如规范命名、规范注释、消除超大类或函数、提取重复代码等等
			
	重构的时机：什么时候重构（when）？
	
		我们必须探索一条可持续、可演进的方式。
		
		所以，我特别提倡的重构策略是持续重构。这也是我在工作中特别喜欢干的事情。
		
		主动重构
		
		总之，就像把单元测试、Code Review 作为开发的一部分，我们如果能把持续重构也作为开发的一部分，成为一种开发习惯，对项目、对自己都会很有好处。
		
		技术在更新、需求在变化、人员在流动，代码质量总会在下降，代码总会存在不完美，重构就会持续在进行。
		
	重构的方法：又该如何重构（how）？
	
		对于大型重构来说，因为涉及的模块、代码会比较多，如果项目代码质量又比较差，耦合比较严重，往往会牵一发而动全身，本来觉得一天就能完成的重构，你会发现越改越多、越改越乱，没一两个礼拜都搞不定。而新的业务开发又与重构相冲突，最后只能半途而废，revert 掉所有的改动，很失落地又去堆砌烂代码了。
		
		在进行大型重构的时候，我们要提前做好完善的重构计划，有条不紊地分阶段来进行。每个阶段完成一小部分代码的重构，然后提交、测试、运行，发现没有问题之后，再继续进行下一阶段的重构，保证代码仓库中的代码一直处于可运行、逻辑正确的状态。每个阶段，我们都要控制好重构影响到的代码范围，考虑好如何兼容老的代码逻辑，必要的时候还需要写一些兼容过渡代码。只有这样，我们才能让每一阶段的重构都不至于耗时太长（最好一天就能完成），不至于与新的功能开发相冲突。
		
		大规模高层次的重构一定是有组织、有计划，并且非常谨慎的，需要有经验、熟悉业务的资深同事来主导。而小规模低层次的重构，因为影响范围小，改动耗时短，所以，只要你愿意并且有时间，随时都可以去做。
		
		我们还可以借助很多成熟的静态代码分析工具（比如 CheckStyle、FindBugs、PMD），来自动发现代码中的问题，然后针对性地进行重构优化。
		
		对于重构这件事情，资深的工程师、项目 leader 要负起责任来，没事就重构一下代码，时刻保证代码质量处在一个良好的状态。
		
		


为了保证重构不出错，有哪些技术手段
		
	单元测试
			
		什么是单元测试
			
			单元测试由研发工程师自己写，单元测试的测试对象是类或者函数，用来测试一个类和函数是否都按照预期的逻辑执行。这是代码层级的测试。
			
			写单元测试本身不需要什么高深技术。它更多的是考验程序员思维的缜密程度
			
		为什么要写单元测试
			
			单元测试能有效地帮你发现代码中的 bug
				
				可以这么说，坚持写单元测试是保证我的代码质量的一个“杀手锏”，也是帮助我拉开与其他人差距的一个“小秘密”。
				
			写单元测试能帮你发现代码设计上的问题
			
			单元测试是对集成测试的有力补充
			
			写单元测试的过程本身就是代码重构的过程
			
			阅读单元测试能帮助你快速熟悉代码
		
			单元测试是 TDD 可落地执行的改进方案
				
				测试驱动开发（Test-Driven Development，简称 TDD）是一个经常被提及但很少被执行的开发模式。
				
				它的核心指导思想就是测试用例先于代码编写
				
		如何编写单元测试
			
			单元测试框架Junit、TestNG、Spring Test
			
			对于如何使用这些单元测试框架，大部分框架都给出了非常详细的官方文档，你可以自行查阅。
			
			1. 写单元测试真的是件很耗时的事情吗？
			
				尽管单元测试的代码量可能是被测代码本身的 1～2 倍，写的过程很繁琐，但并不是很耗时。毕竟我们不需要考虑太多代码设计上的问题，测试代码实现起来也比较简单。不同测试用例之间的代码差别可能并不是很大，简单 copy-paste 改改就行。
			
			2. 对单元测试的代码质量有什么要求吗？
				
				单元测试毕竟不会在产线上运行，而且每个类的测试代码也比较独立，基本不互相依赖。所以，相对于被测代码，我们对单元测试代码的质量可以放低一些要求。命名稍微有些不规范，代码稍微有些重复，也都是没有问题的。
				
			3. 单元测试只要覆盖率高就够了吗？
			
			4. 写单元测试需要了解代码的实现逻辑吗？
				
				单元测试不要依赖被测试函数的具体实现逻辑，它只关心被测函数实现了什么功能。
				
			5. 如何选择单元测试框架？
				
				写单元测试本身不需要太复杂的技术，大部分单元测试框架都能满足。在公司内部，起码团队内部需要统一单元测试框架。
				
		单元测试为何难落地执行？
		
			100% 落实执行单元测试是件“知易行难”的事。
			很多人往往会觉得写单元测试比较繁琐，并且没有太多挑战，而不愿意去做。
			
			这要求工程师们有足够强的主人翁意识（ownership），毕竟光靠 leader 督促，很多事情是很难执行到位的。
			
			对于程序员这个具有很强学习能力的群体来说，学会如何写单元测试并不是一件难事，难的是能够真正感受到它的作用，并且打心底认可、能 100% 落地执行。这也是我今天的课程特别想传达给你的一点。
			
			
			
			
		
		

	
		