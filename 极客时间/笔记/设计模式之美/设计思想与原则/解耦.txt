解耦为何如此重要
	回顾：
		所谓高内聚，就是指相近的功能应该放到同一个类中，不相近的功能不要放到同一类中
		所谓松耦合指的是，在代码中，类与类之间的依赖关系简单清晰
	
	不管是阅读代码还是修改代码，“高内聚、松耦合”的特性可以让我们聚焦在某一模块或类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于过于发散，降低了阅读和修改代码的难度。
代码是否需要解耦
	如果依赖关系复杂、混乱，那从代码结构上来讲，可读性和可维护性肯定不是太好，那我们就需要考虑是否可以通过解耦的方法，让依赖关系变得清晰、简单。
	
如何给代码“解耦”？
	
	封装与抽象
	
	中间层
	
		我的handler就有点像中间层
		
		第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。
		
		第二阶段：新开发的代码依赖中间层提供的新接口。
		
		第三阶段：将依赖老接口的代码改为调用新接口。
		
		第四阶段：确保所有的代码都调用新接口之后，删除掉老的接口。
	
	模块化
		不同的模块之间通过 API 来进行通信，每个模块之间耦合很小，每个小的团队聚焦于一个独立的高内聚模块来开发，最终像搭积木一样将各个模块组装起来，构建成一个超级复杂的系统。
		分而治之
		
		
	其他设计思想和原则
	
		单一职责原则
		
		基于接口而非实现编程
		
		依赖注入
		
		多用组合少用继承
		
		迪米特法则