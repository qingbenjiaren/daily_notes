“高内聚、松耦合”是一个比较通用的设计思想，可以用来指导不同粒度代码的设计与开发

高内聚”用来指导类本身的设计，“松耦合”用来指导类与类之间依赖关系的设计

什么是高内聚

	所谓高内聚，就是指相近的功能应该放到同一个类中，不相近的功能不要放到同一个类中。
	
	相近的功能往往会被同时修改，放到同一个类中，修改会比较集中，代码容易维护。
	
	单一职责原则
	
什么是松耦合
	
	所谓松耦合是说，在代码中，类与类之间的依赖关系简单清晰。
	
	即使两个类有依赖关系，一个类的代码改动不会或者很少导致依赖类的代码改动
	
内聚和耦合的关系
	
	前面也提到，“高内聚”有助于“松耦合”，同理，“低内聚”也会导致“紧耦合”
	
	每个模块（unit）只应该了解那些与它关系密切的模块（units: only units “closely” related to the current unit）的有限知识（knowledge）。或者说，每个模块只和自己的朋友“说话”（talk），不和陌生人“说话”（talk）。
	
	不该有直接依赖关系的类之间，不要有依赖；
	有依赖关系的类之间，尽量只依赖必要的接口。
	
	
	假如有一个类服务于底层网络通信NetworkTransporter
	public class NetworkTransporter { 
		// 省略属性和其他方法... 
		public Byte[] send(HtmlRequest htmlRequest) {
			//... 
		
		}
	}
	
	思考：其中有什么问题。
	作为一个底层网络通信类，我们希望它的功能尽可能通用，而不只是服务于下载 HTML
	所以，我们不应该直接依赖太具体的发送对象 HtmlRequest。
	从这一点上讲，NetworkTransporter 类的设计违背迪米特法则，依赖了不该有直接依赖关系的 HtmlRequest 类。
	public class NetworkTransporter { 
		// 省略属性和其他方法... 
		public Byte[] send(String address, Byte[] data) {
			//... 
		
		}
	}
	假如你现在要去商店买东西，你肯定不会直接把钱包给收银员，让收银员自己从里面拿钱，而是你从钱包里把钱拿出来交给收银员
	
	这里的 HtmlRequest 对象就相当于钱包，HtmlRequest 里的 address 和 content 对象就相当于钱。
	我们应该把 address 和 content 交给 NetworkTransporter，而非是直接把 HtmlRequest 交给 NetworkTransporter。
	
	，结合迪米特法则，我们可以总结出一条新的设计原则，那就是“基于最小接口而非最大实现编程”
	
	有些同学之前问，新的设计模式和设计原则是怎么创造出来的，实际上，就是在大量的实践中，针对开发痛点总结归纳出来的套路。
	
	设计原则本身没有对错，只有能否用对之说。不要为了应用设计原则而应用设计原则，我们在应用设计原则的时候，一定要具体问题具体分析。
	
	所谓高内聚，就是指相近的功能应该放到同一个类中，不相近的功能不要放到同一类中
	相近的功能往往会被同时修改，放到同一个类中，修改会比较集中
	
	所谓松耦合指的是，在代码中，类与类之间的依赖关系简单清晰
	即使两个类有依赖关系，一个类的代码改动也不会或者很少导致依赖类的代码改动。
	
	