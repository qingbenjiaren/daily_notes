水平拆分的架构

	数据库：海量数据需要存储，需要对数据库进行分表分库进行存储
	
		1、水平拆分
		2、垂直拆分
		
	案例：数据库海量数据数据库拆分方式
		水平拆分：
			
			
			
			
	业务拆分-水平拆分（看图）
		水平拆分的问题：
			1、请求链路变长
			2、response time变长
			3、定位问题变得困难
			4、运维成本上升
			5、拆分粒度比较粗（所有服务都在一起）
			6、模块耦合度比较高

			为什么要使用水平拆分
			1、虽然链路变长，但是服务进行分层拆分，每一层代码执行变少了，且分得了更多CPU，内存，处理速度快
			2、水平拆分，集群扩展规模变得更加庞大
			3、水平拆分：吞入能力是提升的

			进一步提高水平拆分
			解决方案：异步架构，在网关层和表现层加一个消息中间件，这就叫异步架构，让请求到达服务之前，进行异步化的处理，请求发送到MQ就直接返回，几乎不耗时，关键就看MQ的堆积能力了.，rocket出马，可以进一步提高吞吐量
			思考问题：
			读写都适合异步架构吗？显然不是，查询不能做异步，写操作可以使用异步架构
	
	业务拆分-垂直拆分（看图）
		垂直拆分：SOA架构，根据业务进行拆分，把不同的业务拆分为单独的模块

			SQA架构有什么问题
			1、每一个服务还是一个单体架构
			2、对总线的依赖比较高

			SOA优点：
			1、吞吐能力急剧提升，集群规模大
			2、实现敏捷开发
			3、可扩展性强
	
	业务拆分-微服务架构
		微服务架构就是水平拆分+垂直拆分的结果
		
		
	架构的选择：
		单体架构
		水平拆分
		垂直拆分
		微服务架构
		
	云原生时代：
		1、iaas
		2、paas
		3、saas
		4、云原生架构（服务治理，服务监控，部署，运维）
		5、serverless
	
	思考：企业需要什么样的架构
	1、老板需求？
	2、人员技术能力？
	3、时间成本？
	4、运维成本？
	5、业务复杂度
	6、架构复杂
	
	例如：采用微服务架构？？
	
	思考问题：	
		1、服务治理
		2、数据一致性
		3、接口幂等性问题
	总结：一定要选择适合当前公司架构，就是最好的架构
	
	
	
	系统设计的一些原则
		在互联网项目开发中，总是不断针对新的需求去研发新的系统，而很多系统的设计都是可以触类旁通的
		
		架构师具备什么样的能力
			1、架构设计能力：30%
			2、技术能力：30%
			3、管理能力：10%
			4、沟通能力：5%
			......
			......
			......
			
		思考：每一行代码都有出现异常的可能？？？
		
		哲学的思考：
		
		海恩法则：
			事故的发生时量的积累的结果（并发量，数据量，服务量....）
			再好的技术、再完美的规章，在实际操作层面也无法取代人自身的素质和责任心
			
		墨菲定律：
			任何事情都没有表面上看起来那么简单。
			所有事情的发展都会比你预计的时间长。
			会出错的事总会出错
			如果你担心某种情况发生，那么它更有可能发生
			
		警示我们，在互联网公司里，对生产环境发生的任何怪异现象和问题都不要轻易忽视，对于其背后的原因一定要查彻底。
		同样，海恩法则也强调任何严重事故的背后，都是多次小问题的积累，积累到一定的量级后会导致质变，严重的问题就会浮出水面
		我们要有技术攻关的能力



	软件架构中高可用的设计
		高可用：服务一直可用
		服务永远可用：伪命题 --- 服务器硬件会坏，操作系统崩溃，软件服务崩溃，程序异常
		
		高可用，HA(High Availability)是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。
		
		
		
		描述				通俗叫法			可用级别			年停机时间
		基本可用性			2个9				99%					87.6小时
		较高可用性			3个9				99.9%
		
		
		
		故障的度量与考核
		对于管理而言，可用性是产品的整体考核指标。每个工程师而言：使用故障分来考核
		
		
		如何保证系统的高可用性
		
		1、负载均衡
		2、限流
		3、降级
		4、隔离
		5、超时与重试
		6、回滚
		7、压测与预案
		
		
		负载均衡
			LVS
			NGINX
			dubbo
			springcloud
			
			负载均衡算法：
				round-robin
				ip_hash
				hash_key
				一致性hash
				
			失败重试
			
			健康检查
				心跳检测
			
			故障转移
		
		隔离术
			隔离是指将系统或资源分隔开，系统隔离是为了在系统发生故障时，能限定传播范围和影响范围，即发生故障后不会出现滚雪球效应，从而保证只有出问题的服务不可用，其他服务还是可用的
			
			资源隔离通过隔离来减少资源竞争，保障服务间的相互不影响可用性
			
			在实际生产环境中，
				线程隔离
				进程隔离
				集群隔离
				机房隔离
				读写隔离
				快慢隔离
				动静隔离
				
				线程隔离：
					线程隔离主要指的是 线程池 隔离。请求分类，交给不同的线程池进行处理，一个请求出现异常，不会导致故障扩散到其他线程池
				
				进程隔离
					把项目拆分为一个个的子项目，然后让这些子项目进行物理隔离。项目和项目之间没有调用关系
					
				集群隔离
					项目上线后，一定会进行集群部署，为了提高服务高可用性，采用集群隔离术
				
				机房隔离
				
				读写隔离
					Redis主从 -- 读写分离
					互联网项目：读多，写少
					
					读：服务器多，
					写：服务器少
				
				动静分离
				
				热点隔离
				
			限流
				
				限流算法
				
					tomcat限流
						通过配置来限流
					
					接口限流
						熔断
					redis限流
						分布式限流，在集群操作，使用Redis+lua脚本限流，保证操作的原子性
						
					Nginx限流
						安装模块
			
			降级
				降级预案
					一般
					
					警告
					
					错误
					
					严重错误
				
				降级方案
					页面降级：部分数据暂时展示mock数据（缓存数据，不去数据库读），以此来释放服务器压力，等高并发恢复后再读取真实数据
					
					页面异步请求降级：暂时读取临时数据
					
				
				
			
			
			

		