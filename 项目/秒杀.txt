秒杀
		商品录入
		审核
		上架
		秒杀
		
	业务的特点
		瞬时并发量大：大量用户同一时间进行抢购，网站瞬时访问流量递增
		库存少：访问请求数量远远大于库存
		业务流程简单：业务比较简单，下单减库存
		
		瞬时并发量压力非常大
			2000QPS -> 20W QPS
			
	秒杀为什么难做：
		
		对现有业务冲击
		高并发应用负载高
		突然增加网络与服务带宽
		直接下单
		控制商品页面购买按钮点亮
		下单前置检查
		
		秒杀：单独部署做一个项目，不影响其他业务
		
		并发负载高：限流
		
		直接下单：动态下单URL（活动没有开始之前，是无法获得动态URL下单连接）
		
		按钮点亮的问题：随着时间的改变修改按钮的样式
		
		
	秒杀优化架构的设计实现
		1、秒杀问题思考
			1）并发负载非常高问题
					（1）、尽量把请求拦截上有服务，不要让请求落在数据库上面。（不要让锁落在数据库）
					（2）、充分利用缓存（秒杀业务，读多写少）
					（3）、Nginx缓存、限流
					（4）、redis缓存
					（5）、浏览器缓存
					（6）、堆缓存
					（7）、库存2000，只放2000人写
					（8）、DNS缓存
			2）对现有业务的冲击
					
			3）数据库负载高
			4）增加的服务器和网络带宽
			5）库存问题
			6）数据一致性问题
		
		
		
		秒杀入库：
			入库方式：2种
				1）商家录入商品
				
				2）定时入库
					每天早上8：00入库一批商品，14:00入库一批商品
					
					
			Redis库存怎么存
				1）Redis中库存第一种存储方式
					1）hset(key,value,goods);//把秒杀商品对象添加到redis中，使用hash结构进行存储
					2）秒杀业务实现
							Goods goods = redis.hget(key,value);
							if(goods.getStockCount <= 0){//库存判断，查询是否存在库存
								//此商品已经卖完
							}
							
							//该业务不可行，不是原子性
							
							
						Redis中库存第二种存储方式
						
						1）hset(key,value,goods);//把秒杀商品对象添加到redis中，使用hash结构进行存储
						2）下单
							a、long result = redis.hincr(key,value,-1);//原子操作减库存，查询和减库存一步到位
							b、if(result < 0){
								//此商品已经被卖完
							}
							
						Redis中库存的第三种方式
							（1）、hset(key,value,goods)
							（2）、lpush(key,itemId)//使用队列来存储
								
								从队列中pop一个ID，相当于库存减1
								判断队列剩余长度，判断库存是否存在
								
						在控制库存超卖的问题是一个难点，通常情况下可以对其加锁解决库存超卖的问题，但是加锁会降低秒杀下单的性能
						可以借助redis单线程的特性来解决库存超卖的问题
						
						把详情页面做成静态页面（不变化，所有商品都有）
						
						技术方案（页面静态化）：
							1、freemarker
							2、velocity
							
						秒杀倒计时：
							初始时间从后台获取
						
						POP一个ID（减库存）
						成功：获得商品信息做处理
							  创建订单，把订单数据存入redis
							  库存减一
							  判断库存是否为0
								不为0，同步redis
								否则，同步数据库
								
						
						业务优化
						
							多线程下单
								第一个优化方案，使用多线程的方式来做下单处理
							限流排队
								
								让用户排队，从队列中取出用户，去做多线程秒杀
								已经在队列了，就不能点击了
								判断库存（粗颗粒度的限流），直接获取商品数量，满足条件入队
								
								通过以上条件的筛选，进入多线程秒杀
								
								
								还应该注意业务的回滚
							
							
								