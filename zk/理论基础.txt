分布式协调服务器

Zookeeper简介
	Zookeeper:动物管理员
	Zookeeper是一个开源的分布式应用程序协调服务器，其为分布式系统提供
	一致性服务。其一致性是通过基于Paxos算法的ZAB协议完成的。
	主要功能包括：配置维护、域名服务、分布式同步、集群管理等。
	
	Consul、Doozerd、etcd
	
		
		一致性：
			zk是如何保证分布式系统的一致性？
			
			顺序一致性：
				从同一个客户端发起的多个事务请求（写操作请求），最终会严格按照其发起顺序记录到zk中
				
			原子性
				所有事务请求的结果在集群中所有Server上的应用情况是一致的。要么全部应用成功，
				要么都没有成功。
				
			单一视图
				无论客户端连接的是集群中的哪一台服务器，其读取到的数据模型中的数据都是一致的。
			可靠性
				一旦某事务被成功应用到zk。则会一直被保留下来，除非另一个事务将其修改
				
			最终一致性
				一旦一个事务被成功应用，zk可以保证在一段较短的时间内，客户端
				最终一定能够从服务端读取到最新的数据，但是不能保证实时读取到。
				
			
	Paxos算法：
		难度比较大
		Paxos算法是莱斯利·兰伯特（Leslie Lamport，就是 LaTeX 中的"La"，此人现在在微软研究院）于1990年提
		出的一种基于消息传递的一致性算法。这个算法被认为是类似算法中最有效的。
		
		解决的问题，在分布式系统中，如何就某个协议达成一致
		
		
		拜占庭将军问题
		
		算法描述
			在Paxos算法中有三种角色，分别具有三种不同的行为，但很多时候，一个进程可以有多个行为
			三种角色
				提案者
				表决者
				同步者
			paxos算法的一致性
			
			算法过程描述
				准备阶段
				
				接受阶段
				
		死锁需要同时具备以下几个条件
			互斥条件：一个资源每次只能被一个进程使用
			请求与保持条件：一个进程因请求资源而阻塞时，对方获得的资源保持不放
			不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺
			循环等待条件L若干进程之间形成一种头尾相接的循环等待资源关系
			
		
		Paxos活锁问题
			活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试—失败—尝试—失败的过程。处于活锁的实体是在不断的改变状态，活锁有可能自行解开。
			两个节点提案，但是一直重提，就会一直不成功
			该问题的解决：只允许一个进程提交提案
			
	ZAB协议：
		ZAB，Zookeeper Atomic Broadcast,zk原子消息广播协议，是专为Zookeeper设计的一种支持崩溃恢复的原子广播协议，
		在zookeeper中，主要依赖ZAB协议来实现分布式数据的一致性
		使用一个单一朱进程来接收并处理客户端的所有事物请求，leader，leader挂了之后支持选举
		
		ZAB与Paxos的关系
			ZAB 协议是 Paxos 算法的一种工业实现算法。但两者的设计目标不太一样。ZAB 协议主
			要用于构建一个高可用的分布式数据主从系统，即 Follower 是 Leader 的从机，Leader 挂了，
			马上就可以选举出一个新的 Leader，但平时它们都对外提供服务。而 Fast Paxos 算法则是用
			于构建一个分布式一致性状态机系统，确保系统中各个节点的状态都是一致的。
			
		主备和主从的区别：
			主备：平时备用机只做备份，当主宕机，切换到备用机
			主从：平时从机是对外服务的，当主宕机，从机变主机
			
		三类角色
			为了避免 Zookeeper 的单点问题，zk 也是以集群的形式出现的。zk 集群中的角色主要有以下三类：
			Leader：事务请求的唯一处理者，也可以处理读请求。
			Follower：可以直接处理客户端的读请求，并向客户端响应；但其不会处理事务请求，
					其只会将客户端事务请求转发给Leader来处理；对Leader发起的事务提案具有表决权；
					同步 Leader 中的事务处理结果；Leader 选举过程的参与者，具有选举权与被选举权。 （就
					好像正式工）
			Observer：可以理解为不参与 Leader 选举的 Follower，在 Leader 选举过程中没有选举权
					与被选举权；同时，对于 Leader 的提案没有表决权。用于协助 Follower 处理更多的客
					户端读请求。Observer 的增加，会提高集群读请求处理的吞吐量，但不会增加事务请求
					的通过压力，不会增加 Leader 选举的压力。（就好像临时工）
		三个数据
		
		三种模式
		
		四种状态
			zk集群中的每一台主机，在不同的阶段会处于不同的状态。每一台主机具有四种状态。
 			LOOKING：选举状态
 			FOLLOWING：Follower的正常工作状态
 			OBSERVING：Observer的正常工作状态
			LEADING：Leader的正常工作状态
		
		
		FAST PAXOS算法中Leader是唯一的提案者，为什么follower还是比较maxN？
			ABA问题，用节点间的递归同步
			详见zk更新同步算法
		
		Observer的数量问题
			并不是越多越好，虽然不会增加事务和选举的压力
			但是其需要从leader同步数据，
			若observer很多，会增加leader的压力
			将follower同步完成，会结束observer的同步
			Leader中存在两个关于Observer的列表：all（包含所有Observer）与service（包含与Leader同步过数据的Observer）
 			service列表是动态变化的。对于没有进入到service列表中的Observer，其会通过心跳与Leader进行连接，一旦连接成功，马上就会从Leader同步数据，同步完成后向Leader发送ACK。Leader在接收到其ACK后会将其添加到service列表。
 			若客户端连接上了不在service列表中的Observer，那么这个Observer是不能提供服务的。因为该Observer的状态不是Observering。这个状态是通过Observer与Leader间的心跳来维护的。
 			Leader中对于Follower也同样存在两个列表：all与service。其功能与Observer的相似。但不同点是，若Leader收到的Follower同步完成的ACK数量没有过半，则认为同步失败，会重新进行广播，让Follower重新进行同步。
			
			写操作少，读操作很多很多的业务场景下，可以
			设置合理多的observer，
			对于写操作多的情况，设置合理少的Observer
			
		恢复模式的三个原则
			Leader的主动出让原则
				若集群中Leader收到的Follower心跳数量没有过半，此时Leader会自认为自己与集群的连接已经出现了问题，其会主动修改自己的状态为LOOKING，去查找新的Leader。为了防止集群出现脑裂。
				而其它Server由于有过半的主机认为已经丢失了Leader，所以它们会发起新的Leader选举，选出一个新的Leader。
				一个集群出现两个Leader叫脑裂
			
			已经被处理过的消息不能丢
				Leader的更新还未同步到所有Follwer，此时Leader挂，
				再进行Leader选举的时候，会从maxN最大的Follower中选出新的
				Leader，此时，在进行同步算法，初始化同步
				
			被丢弃的消息不能再现原则
			
				Leader某个事务修改了还未同步到Follower，此时Leader挂了，
				原来的Followers投票选举了新的Leader，原先的Leader重启后变成
				Follower，此时再去同步事务，直到遇到与新leader事务ID相同的事务后，
				递归同步相同事务+1的事务，之前的应该被丢弃的消息会被覆盖
				
		Leader选举
			myid
				也称为serverId,这是zk集群中服务器的唯一标识
			逻辑时钟
			
		
		高可用集群的容灾
			
			容灾设计方案
				主机台数问题
					基数台节省资源
					偶数台提高吞吐量
				
				三机房部署
				
					考虑机房、楼宇以及地域，或许还有星球呵呵
					每个机房的节点数量少于一半
						任何一个机房停电或者断网，整个集群仍然可用
					
					若是双机房部署，则其中一个机房的节点数量肯定过半，所以
					这个机房如果出现故障，整个集群不可用
				
				CAP定理
					在一个分布式系统里，Consistency(一致性)、Availability（可用性）、
					Partition tolerance(分区容错性)，三者不可兼得。
					
					一致性：分布式系统中多个主机之间是否能保证数据一致。
					可用性：系统提供的服务必须一直处于可用状态。即对于用户
					的每一个请求，系统总是可以在有限的时间内对用户做出相应。
					分区容错性：分布式系统在遇到任何网络分区故障时，仍能够保证对外提供满足一致性和
					可用性的服务
					
					如果要保证一致性：就得牺牲可用性，因为在数据同步期间，不对外服务
					若要保证可用性：那么在同步期间，有可能读到的是未同步的数据
					
				Base理论
					BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的简写。是CAP定理对于一致性与可用性权衡的结果。
					BASE理论的核心思想是：即使无法做到强一致性，但每个系统都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。
					
					
					
			
		
			
				
		
		
			