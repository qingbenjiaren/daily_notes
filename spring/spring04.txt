课程主题
	spring ioc 模块源码阅读&aop原理分析&动态代理模式
	
课程目标
	1.搞清楚spring ioc模块中如何完成bean的创建
	2.搞清楚循环依赖
	3.搞清楚aop核心概念
	4.搞清楚AspectJ和Spring aop的关系
	5.搞清楚动态代理的原理（JDK，CGLIB）
	6.搞清楚aop工作原理
	
课程回顾
	1.spring  ioc BeanDefinition的注册流程
	
课程内容
	1.源码阅读（多读几遍）
		主线：搞清楚bean的创建流程
		入口：AbstractApplicationContext
				refresh#第11步
				
	2.循环依赖问题
		构造循环依赖：死循环，只能改代码，无法解决
			对象还没创建出来
			
		set方法循环依赖
			对象已经new出来，只是属性填充时遇到了循环依赖的问题
			
		场景模拟：
			前提	A -------->B       B----------->B
			
			1.创建A对象
				正在创建中的对象Set集合（beanName）
				
				A对象实例化（new）
					将A对象的引用，提前暴露到三级缓存中，并且将A对象封装到一个ObjectFactory中
						ObjectFactory不只是可以获取A对象，还有可能对A对象产生代理，也就是返回的可能是原对象也可能是代理对象
					三级缓存产生完对象之后，就会将产生出来的A对象（不一定是原对象了）放入二级缓存
				A对象依赖注入（set方法）
					setB（b对象实例）-----创建B对象
						B对象实例化（new）
						B对象依赖注入（set方法）
							setA（AbstractApplicationContext对象实例）-----创建A对象（需要解决循环依赖）
								正在创建中的对象Set集合（beanName）?
								去二，三级缓存中找A对象
							
						B对象初始化
						将B对象也放入一级缓存
						
				A对象的初始化
				
				将A对象放入一级缓存
				
				-------到此A对象才是完整的---------
				
				
				A------>B      B-------->C     C-------A
				A------>C
				C被依赖的两次，所以第一次被依赖时，有三级缓存产生C的实例，然后放入二级缓存
				除了第一次，不会再走三级缓存，后面如果想解决C的循环依赖问题，都需要去二级缓存去获取
		
		
		
		
	面试问题
		FactoryBean和BeanFactory区别
			BeanFactory是spring的顶级接口（基础容器），它负责管理bean实例
			FactoryBean只是spring容器中，被管理的bean对象，只是说这个bean它的能力就是产生另外的对象。
			
			BeanFactory是包容万物的大工厂。
			
			FacoryBean是一个只能生产指定对象的小工厂，而且这个小工厂还被大工厂管理。
			
			FactoryBean和普通Bean实例，被Spring管理时，也时区别对待的。通过&前缀来区分FactoryBean和普通bean
			
		如果原型模式的Bean发生循环引用，则直接不处理，抛出异常
		
		因为spring处理循环依赖是通过缓存去解决的循环依赖的问题，而原型模式是不存缓存的
		这样有冲突
		
		
		
		
	3.aop核心概念梳理
		aop 是一种思想和oop一样
		aop的实现主要有集中：AspectJ	Spring AOP	Spring整合AspectJ
		AOP面向切面编程，其实就是无侵入的进行功能增强，使用AOP可以实现业务代码和系统代码分离。
		
		AOP的核心思想，就是通过织入去增强代码，织入又分为静态织入和动态织入
		
		静态织入，指的就是不修改源代码，指对class文件进行修改，实现功能增强。AspectJ使用的就是这种
		动态织入，指的就是运行时，通过动态代理技术，产生代理对象，完成功能增强。Spring AOP spring整合AspectJ
		
		AOP的核心概念
			目标对象
			连接点
			切入点
			代理对象
			织入
			通知
			切面
			通知器
		
		动态代理
			代理技术分为静态代理和动态代理
				静态代理其实就是再写源码时，为目标类去编写一个对应的代理类（java文件）
				
				动态代理技术就是再运行时，通过不同的技术实现，去完成新的对象。
				
			动态代理常见的技术有两种：JDK动态代理，CGLIB动态代理
				JDK动态代理技术：目标类必须有接口才能使用这种方式，代理类和目标类实现了同样的接口
				
				CGLIB动态代理技术：目标类只要不是final修饰的就可以，不需要有接口，用的时继承技术，代理类时目标类的子类
				
				Spring默认使用的时JDK，可以认为指定使用CGLIB
				
				区别如下
				jdk1.7之前，CGLIB运行比JDK块，之后效率差不多，但是JDK产生代理对象效率高
				CGLIB地产时通过ASM字节码工具包去实现的字节码重写
				JDK只是相当于帮程序员再后台写了java文件，并编译，加载
			
			JDK和cglib产生代理对象的方式是怎么样的？
				怎么用
				jdk是如何产生代理对象的原理
				
			JDK和CGLIB产生的代理对象的处理步骤是什么样的
				怎么用
				原理：代理对象执行时，会调用InvocationHandler或者MethodInterceptor去完成增强功能
			
			
			
				