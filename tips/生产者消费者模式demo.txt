 @Test
    public void test01() throws InterruptedException {
        ReentrantLock lock = new ReentrantLock();
        Condition full = lock.newCondition();
        Condition empty = lock.newCondition();
        Queue<String> queue = new ConcurrentLinkedQueue<>();
        Thread producer = new Thread(()->{
            int i = 0;
            while(true) {
                lock.lock();
                if(queue.size() == 10){
                    System.out.println("队列满了，生产者休息");
                    try {
                        full.await();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                queue.offer("大米" + ++i);
                empty.signal();
                lock.unlock();
                try {
                    if(i % 10 == 0){
                        System.out.println("生产者休息20秒");
                        TimeUnit.SECONDS.sleep(20);
                        System.out.println("生产者开始干活儿");
                    }
                    TimeUnit.MILLISECONDS.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        Thread consumer = new Thread(()->{
            int i = 0;
            while(true) {
                lock.lock();
                if(queue.size() == 0){
                    System.out.println("队列空了，休息,等待生产者生产");
                    try {
                        empty.await();
                        System.out.println("生产者开始生产，消费者开始干活");
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                System.out.println("消费者消费：" + queue.poll() + "消费后队列长度为"+ queue.size());
                full.signal();
                lock.unlock();
                try {
                    TimeUnit.MILLISECONDS.sleep(1500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        producer.start();
        consumer.start();
        TimeUnit.MINUTES.sleep(10);
    }