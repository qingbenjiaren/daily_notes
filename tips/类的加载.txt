类加载的时机
	类加载的7个阶段
		加载------验证-------准备-------解析------初始化-------使用-----卸载
		
	加载的时机：
		遇到new
		使用反射调用
		当初始化一个类时，发现其父类还未初始化，则需要先初始化其父类
		当虚拟机启动时，包含main方法的类，虚拟机会先初始化这个类。
		
		
		被动引用：
			子类调用父类的静态属性，子类不会初始化，对于静态字段，只有直接定义这个字段的类才会被初始化
			通过数组定义来引用类，不会触发次类的初始化。
			常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量类的初始化
			
			加载
				通过一个类的全限定名来获取定义此类的二进制字节流
				将这个字节流锁代表的静态存储结构转化为方法区的运行时数据结构
				在内存中生成一个代表这个类的.class对象，作为方法区这个类的各种数据访问入口
			验证：
				确保Class文件的字节流中包含的信息符合当前虚拟机的要求
					文件格式验证
					元数据验证
					字节码验证
					符号应用验证
					
			准备：
				准备阶段是正式为类变脸分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中分配
				假设一个类变量为：
					public static int value = 123;
					那么变量value在准备阶段的值时0而不是123，只是分配内存
					int     0;
					long    0L;
					short	0
					char	'\u0000'
					byte	0
					boolean	false
					float   0.0
					double  0.0
					reference null
					
					如果字段属性表中存在ConstantValue属性，在准备阶段就会初始化为指定的值
					public static final int = 123;
			
			解析
				类或接口的解析
				字段解析
				类方法解析
				接口方法解析
				
				
			初始化：执行类构造器<clint>方法的过程
				<client>()方法，是由编译器自动收集类中的所有类变量的复制动作和静态语句块中的语句合并产生的
				<client>()方法与实例构造函数不同，它不用显示的调用父类的<client>（）方法，在子类的client方法执行前，其父类的client方法一定已经执行，最先执行的是Object
				由于父类的client方法先执行，也就意味着父类中的静态语句块要优先于子类的。
				接口的client方法就不一样了，不会先直接父接口的client方法
				线程安全