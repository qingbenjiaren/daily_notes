Each SpringApplication registers a shutdown hook with the JVM to ensure that the 
ApplicationContext closes gracefully on exit. All the standard Spring lifecycle callbacks (such as the 
DisposableBean interface or the @PreDestroy annotation) can be used.
In addition, beans may implement the org.springframework.boot.ExitCodeGenerator interface if they 
wish to return a specific exit code when SpringApplication.exit() is called. This exit code can then 
be passed to System.exit() to return it as a status code, as shown in the following example:
@SpringBootApplication public class ExitCodeApplication {
    @Bean     public ExitCodeGenerator exitCodeGenerator() {         return () -> 42;     }
    public static void main(String[] args) {   System.exit(SpringApplication.exit(SpringApplication.run(ExitCodeApplication.class, args)));     }
}
Also, the ExitCodeGenerator interface may be implemented by exceptions. When such an exception is encountered, 
Spring Boot returns the exit code provided by the implemented getExitCode() method.
