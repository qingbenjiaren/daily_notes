Dubbo的负载均衡
	和Nginx的负载均衡是不一样的，在系统架构所处的位置是不同的
	dubbo的负载均衡可以配置在消费者端和提供者端
	但是最终的负载均衡仍然是发生在消费者在做，因为就算设置在提供者端，提供者会注册到zk，消费者从zk下载下来
	
	
	复杂问题简单化：
		如果选出的invoker曾今被选出过，那么进行重新选举
		
		
		dubbo在用Arraylist的时候，喜欢设置ArrayList的长度
		为什么呢？老雷认为是细活儿
		
		老雷觉得不合理的地方：
			代码有冗余
			在我们编程的过程中要尽量要避免冗余代码
			
		
		负载均衡策略
			random
				把服务器按照权重放到坐标系上，x轴
				权重越大，范围空间就越大，比如权重为，5，3，6
				那么我们生成一个0到14的随机数，0-5，5-8，8-14
				假设生成了随机数为12，则应该落到权重为6的策略上
				
				程序实现：
					让随机数减权重：offset - weight[i],知道出现负数，说明i就是随机的策略
					
					若所有权重都相同，则随机的是invoker的长度
					
					注意分开处理的好处，若权重都相同了，就不需要去计算了，但从逻辑上来说，上面那一块完全可以处理了权重相同的部分
					
					getWeight
					权重的设置：标签里，有weight 有warmUp
					
					remote.timstamp是启动时间戳
					int uptime = 当前时间-启动时间 = 已运行时间
					
					warmup 预热时间，默认值10分钟
					
					若启动时间>0 且启动时间小于预热时间，预热的时候权限分配小一些
						把权重改小
						(uptime / warmup) * weight    用启动时间比预热时间 * 权重，
						意思就是当启动时间小于预热时间的时候，降低当前权重
						若启动时间大于预热时间了，去当前权重
					
					启动时间越长，权限越大
				
				random是最简单的，并且意思不大
				
				
				加权最小活跃度算法
					活跃度越小，优先级越高，被调度到的几率就越高
					活跃度相同则按照加权随机算法进行负载均衡
					系统刚启动的时候，活跃度都是一样的，都是0
					
					
					把所有活跃度最小的拿出去，记录活跃度最小的
					若只有一个，直接取出来
					若大于一个，取随机算法（random）
					老雷有看法：这里为什么直接用random算法，而是又重新写了一遍random算法，这样的写两个地方，需要改两个地方
					
					
				roundrobin
					加权轮询算法。其实就是权重算法。按设定好的权重，找权重最大的进行调度
					是一种“主机权重”与“方法权重”双权重轮询算法。
					
					基于方法权重的
					//key:全限定方法名
					//value:内存map
					//内层map的key：主机信息，ip:port/业务接口
					//内层map的value：权重轮询实例
					private ConcurrentMap<String, ConcurrentMap<Stringm WeightedRoundRobin>> methodWeightMap = new ConcurrentHashMap<>();
					//过期时间
					private static fonal int RECYCLE_PERIOD = 60000;
					
					//基于权重的轮询实例
					protected static class WeightedRoundRobin{
						//主机权重，固定值
						private int weight;
						//方法权重，动态值，默认0
						private AtomicLong current = new AtomicLong(0);
						
						private long lastUpdate;
						
						public void setWeight(ing weight){
							初始化主机权重和方法权重
						}
						
						public long increaseCurrent(){
							//增加方法权重，每一次增加一个主机权重大小
						}
						//减小方法权重，减去所有invoker的主机权重之和
						//目的是让当前的方法权重变为最小权重，选过之后就变成最小的
						public void sel(int total){
							current.addAndGet(-1*total);
						}
					}
					这个算法要看老雷的动画，妙不可言
					主机权重大，轮询的就快，主机权重越大，轮询到的几率就越大，
					因为每次都加一个本身的权重，权重越大，恢复的就越快
					老雷的动画做了一个多小时，要珍惜珍惜，理解理解
					
					这个太妙了，太妙了
					
					
					轮询完了之后，返回选中invoker之前，使方法权重减去最大权重
					
					作者很有趣
					//should not happen here
					
			一致性hash算法
				注意配置的参数
				
				默认值看参数0的哈希
				
				
				哈哈，也有一个一致性哈希环，按逆时针变大，最大值使2的32次方-1，跟时钟一样0点和12点在一个地方
				选择的时候，按顺时针方向，谁最近，选谁
				
				
				新增一台主机，只会减轻离得最近得主机得压力，实际上没有负载均衡开，因为只能减轻临近主机得压力
				
				
				所以，问题来了，dubbo怎么解决？
					为每台主机，虚拟处若干主机出来放到一致性hax环上，哈哈，
					这样再新增物理机的时候，也新增若干台虚拟机
					这样一来，新增一台主机后，对大家都有帮助了，就做到了负载均衡
					妙不可言，dubbo的思想NB
					
					
					虚拟主机的数量默认值使160个
					使用md5生成一个摘要，生成哈希值的时候使需要摘要的、
					每4个物理invoker公用一个摘要生成哈希
					
					为每个invoker生成160个虚拟invoker
					
					
					爽哥，MD5,MD5,MD5,MD5,MD5
					
					根据方法参数的哈希，选择一个invoker
					
					
					Dubbo终于讲完了，没时间消化。。。。。
					可能是我自己不够努力吧
					
					谢谢两年来的经历，让我养成了一个好的习惯
					感谢开课吧，让我知道了努力的成果，让我不觉得自己那么飘飘
					让我可以自己靠自己
					
					
					下次课，就开始讲spring cloud了
					
					
					spring cloud比dubbo框架更有难度
					
					
					
					
					