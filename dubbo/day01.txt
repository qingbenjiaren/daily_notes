dubbo面试
	集群容错：
	面试架构师：
		学习能力强不强？
		性格？
		平时都看哪些东西？
		
		
阿里的rpc框架

	hsf：很舒服，high speed framework 淘宝，比dubbo要早两三年，对于淘宝来说，已经没办法换了，要动的太多了
	dubbo：阿里巴巴B2B，
	sofa：蚂蚁金服
	
	
	Dubbo的两大设计原则
		Dubbo使用“微内核+插件”的设计模式。内核只负责组装插件（扩展点），Dubbo的功能都是由插件实现的，
		也就是Dubbo的所有功能点都可被用户自定义扩展类锁替换。
		
		采用URL作为配置信息的统一格式，所有扩展点都通过传递URL携带配置信息
		
		provider也要订阅，因为要为zookeeper节点添加监听，watcher机制
		
	Dubbbo的三大领域模型
		Protocol 服务域
		Invoker 实体域
		Invocation 会话域
		
	Dubbo的四大组件：
		Registry
		Provider
		Conrainer
		Consumer
		Monitor
	Dubbo的十层架构
		
		
		Invoker维护一个Directory，一个Directory维护一个provider列表，经过router过滤，再进行负载均衡
		
	Dubbo框架架构
		dubbo-all：总的
		dubbo-cluster:集群
			loadbalance
				roundRobinLoadBalance
		dubbo-common；工具类，公共包
		dubbo-config:处理spring
		dubbo-configcenter:
			默认用zk
			还有：etcd
			等等
			
		dubbo-container:容器
			spring
		dubbo-demo:
		dubbo-filter
		dubbo-metadata-report
			URL问好之后就是算数据，就是描述，就是元素局，就是属性
			dubbo-metedata-definition：定义
			dubbo-metadata-protobuf:协议
			元数据序列化，默认序列化到zk：地方
			
		dubbo_monitor
		
		dubbo_plugin
			dubbo-qos:quality of service
		dubbo-registry
			默认：直连
			dubbo-registry-multicast:广播
			dubbo-registry-multiple:多注册中心
			dubbo-registry-zk:
			dubbo-registry-redus:
			sofa
			etcd
		dubbo-remoting
			netty4默认
		dubbo-rpc
			dubbo支持的服务暴露协议
			dubbo-rpc-injvm:本地爆率，伪协议：127.0.0.1
			
			
		
		dubbo-bom
		dubbo-depedencies
		dubbo

		dubbo管控平台
		
	第5章Dubbo的内核解析
		所有的Dubbo的内核是指，Dubbo中所有功能都是基于它之上完成的，都是由它作为基础的。
		dubbo的内核包含四部分：
			SPI，AOP，Ioc，与Compiler
			SPI是dubbo内核的内核
			
			JDK的SPI机制
				Service Provider Interface
				简介
				看老雷的代码
				上层不能看到下层的实现类
				ServiceLoader<SomeService> loader = ServiceLoader.load(SomeService.class);
				Iterator<SomeService> iterator = loader.iterator();
				
				ServiceLoader类中有对jdkSPI的规范说明：英文的
				
				存在的问题：所有的实现都会实例化，没办法只选一个区实例化
			
			Dubbo的SPI
				dubbo并没有直接用jdk的spi，而是做了改进·
				dubbo的SPI规范
					接口名：可以随意定义
					实现类名：功能性前缀
					提供者配置文件路径，依次查找的目录：
					看文档记笔记
					key不能重复，重复了就不知道该加载谁了
					
				可以指定，可以默认，SPI接口，扩展，比如协议（dubbo），容器(spring)，compiler（javaassist）
				ExtensionLoader
				
					getExtensionLoader(Class<T> type)
						type是接口类型，这个ExtensionLoader只能加载这个接口的实现类
					getExtension(String name){
					}
					
					如果是我们自己开发的，也许会把getExtension设置为静态，这样你必须要保证，所有的实现key不能重复，这样在系统庞大以后，
					就不能保证没有重复的key了，但是设置了一个getExtensionLoader后，就保证了，只要同样接口下，没有重复的key就好了，
					这样太妙了，太妙了
					
					为什么不传两个参数，把接口名也加进去，是不是就没有上面的问题了？
					答案是：没有为啥，因为人家就是这样设计的。
					如果是我们来设计，也可以用传两个参数的方法，也可以唯一确认。那么就会问，为什么不传一个参数呢？
					
					dubbo所有的东西都是通过SPI扩展进来的
					
					
					
					看代码了
					后面会详细的跟源码，先不急，先知道什么是dubbo的SPI
					
					
					Adaptive机制
						Adaptive机制，即扩展类的自适应机制。可以指定向要加载的扩展名，也可以不指定。若不指定，则直接加载默认的扩展类。其是通过
						@Adaptive注解实现的
						自适应：：扩展类自己来做适应？？？？？
						
						整个dubbo框架，一共就两个Adaptiive类
						
						限定不能随便扩展，得按照规范来自适应
						
						Adaptive方法
						
							URL的方式
							
							会自动生成一个类（这里看一下回访，学习一下，为什么要跑到自己建的类里面呢，太奇怪了，研究研究，要搞定）Dubbo的动态编译
							
							方法如果不用@Adaptive修饰，而又用自适应对象去获取，会报错，因为会自动生成一个跑出异常的方法
							
							
							面试题：
								url怎么写（xxx://localhost?ooo?order?=wechat）因为生成的类的值就是order
									假设SPI接口是由两个或多个单词构成的，则这里的参数的写法
									例如GoodsOrder
									则这里的写法应该是goods.order
						
							
					
					
					
				
				
				
				
				
		
		负载均衡：
			随机：
			轮询：
			一致性hash：
			
			
			作业：负载均衡策略解析，根据文档线索，去查
			
			
			17年云析大会重启
		18年10月进入apach孵化器
		19年520正式出壳
		