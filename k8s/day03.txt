回顾K8S的架构
	k8s架构 -- master节点（scheduler,api server, controller,etcd）
			-- node节点(docker, kubelet, kube-proxy, fluentd,dns.... pod)
			
			特点：master对应一群node
				  master不存储容器，只做调度，网关，控制器工作
				  真正的容器时存储在node节点的pod容器中
				  k8s是用来编排（管理）容器，但是k8s不直接管理容器，而是通过管理pod来进行容器的编排
				  pod内部可以有一个或者多个容器
				  kubelet负责本节点机器的pod的维护（CRUD）
				  kube-proxy负责来进行负载均衡，在多个pod之间进行负载均衡
				  
				  
=================================================================================================================================

pod
	问题1：K8S到底是什么？？？？？？
		答案：k8s是用来编排容器，但是不直接编排容器，是通过编排pod来进行容器编排
		
	pod是k8s操作的最小单元，k8s通过管理pod来编排容器的
	
	问题2：pod是什么呢?
		pod的定义：
		pod也是一个“容器”，（这个容器中装的是docker容器，pod是用来封装容器的容器），pod实际上是一个虚拟化的分组（pod有自己的ip地址，
		自己的主机名，相当于是一台独立的机器），pod中可以存储一个或者多个容器。
		
		功能：
			通常情况下，再服务上线部署时pod通常被用来部署一组相关的服务
			看图processon
			
		问题：服务的集群部署，应该如何部署？？？
			部署多个pod，多几个pod就时集群，k8s随时可以做一个集群
			
			
		POD底层核心原理：网络，数据存储
		看图
		一个pod不能割裂，一个pod必须在一个物理机上运行，副本pod可以分布在不同的node节点
		
		PID命名空间：Pod中的不同应用程序可以看到其他应用程序的进程ID
		网络命名空间
		IPC命名空间
		UTS命名空间
		Volums（共享数据卷）
		
		Other组件
			CoreDNS：
			Ingress Controller:
			Prometheus:提供k8s监控
			Dashboard可视化界面
			Federation
			ELK
			
			
	核心组件原理
		RC控制器
			replication controller	
				让pod副本数量，与预期的数量始终保持一致（服务要部署集群，实际上就是把pod多部署几个副本，pod数量的控制由副本控制器控制）
				部署于其副本数量：replicas = 3(3个副本---3个pod)
				
				
			可以构建多个master，高可用的k8s集群
			
			底层LXC
			
		RS控制器
			在新版的kubenetes中，建议使用replicaSet副本控制器，ReplicaSet和Deployment结合，支持滚动更新。ReplicaSet取代了replication controller
			其和RC没有本质的不同，
			RC和RS的区别：
				选择器
					RC只支持单选操作
					RS不仅仅支持单选操作，也支持复合选择
					
					标签：
					1 格式：key=value
					2 k8s所有的资源对象都可以使用标签进行表示（控制器，node，pod，service。。。。）
					
					作用：
						标签选择器，通过标签选择资源对象------>选择一组对象，或唯一定位一个资源对象
		
		Deployment
			支持滚动更新，
			
			项目开发：产品经理---->不停发布新的需求 ----> 不停修改代码 ----> 不停发布新的版本 -----> 不停的上线
			
			滚动更新：一个指令搞定一切，一个按钮搞定滚动更新。
			
			先创建新的，再删除旧的
			1 创建新版本的Pod容器
			2 再删除老旧版本的pod容器
			
			Deployment资源对象---部署对象----定义服务部署的基本结构（无状态服务都是使用Deployment部署结构）
			
		HPA
			HorizontalPodAuto
			支持自动扩容 -----> 监听pod cpu利用率，当pod cpu利用率超过80%，自动创建新的pod，分担服务压力（流量高峰自动扩容，牛B）
		
		StatefulSet:为了部署由状态服务而开发的组件
			思考，容器部署有状态服务MySQL,存在什么样的问题？？？
			
			1、容器有生命周期，随时可能宕机
			2、pod也是有生命周期，随时可能宕机
			宕机后会存在什么现象：
				MySQL进行一些实时的数据存储，docker容器，pod容器都是一个进程，进程不能存数据，只能把数据绑定到磁盘上。
				当一个新的pod被创建后，一个容器重启后，会存在数据丢失的现象。甚至新的pod会找不到原来的数据，mysql集群就
				无法使用。容器宕机后，原来的数据就丢失了，所以不能使用deployment来部署有状态的服务
				
				对于k8s来说，不能使用deployment来部署有状态的服务，通常情况下，deployment是用来部署无状态服务
				
				但是k8s提供了一个资源对象，statefulSet，支持有状态服务部署
				
				有状态服务：MySQL，Zookeeper, Elasticsearch,MQ......redis...
				
				什么叫有状态什么叫无状态：
					名词解释：
						有状态：
							1、有实时数据需要存储
							2、集群服务中，把某一台服务抽离出去，过一段时间再加入到集群中，如果服务集群不可用，这个服务就是有状态服务
						无状态：
							1、无实时数据需要存储
							2、集群服务中，把某一台服务抽离出去，过一段时间再加入到集群中，如果服务集群可用，这个服务就是无状态服务
		
				K8S中，有状态服务部署架构：
					看图processon
			
		DaemonSet:保证每一个node节点都会运行一个pod。
		
		
		Volums（共享数据卷）：用于数据挂载
		
		Label：用来表示区分对象
			kubenetes任意API对象都是通过Label标签进行标识，key/value
			
			Lable是RC和service运行的基础。
			
			版本标签："release":"stable","release":"canary"
			环境标签
			架构标签
			
			
			
			老师看的是文档，我也要看文档，看老师的文档
			核心组件是老师自己总结的，好牛B，
			
			
			
			
下节课难度上升一个级别
	实战的时候，难度就会下降，来吧宝贝
	
		
		
		
			
		