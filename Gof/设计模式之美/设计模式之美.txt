每节课后都花5分钟10分钟的时间去思考一下课堂讨论问题。

学习基础，潜移默化、间接地提高对技术的理解


为什么要学习设计模式

	应付面试
	
	talk is cheap, show me the code
	
	代码能力是一个程序员最基础的能力，代码即名片
	
	问题代码：命名不规范、类设计不合理、分层不清晰、没有模块化概念、代码结构混乱、高度耦合
	

	如何分层、分模块？应该怎么划分类？每个类应该具有哪些属性、方法？怎么设计类之间的交互？该用继承还是组合？该使用接口还是抽象类？
	怎样做到解耦、高内聚低耦合？该用单例模式还是静态方法？用工厂模式创建对象还是直接 new 出来？如何避免引入设计模式提高扩展性的同时带来的降低可读性问题？……各种问题，一下子挤到了我面前。
	
	
	读懂开源项目
	
	技术leader，demo，code review，设计良好
	
	招聘：考察候选人的能力
	
	应对面试中的设计模式相关问题；
	告别写被人吐槽的烂代码；
	提高复杂代码的设计和开发能力；
	让读源码、学框架事半功倍；
	为你的职场发展做铺垫。
	
	
什么样的代码才是好代码
	
	如何评价代码质量的高低
	
	实际上，我们很难通过其中的某个或者某几个词汇来全面地评价代码质量。因为这些词汇都是从不同维度来说的。
	这就好比，对于一个人的评价，我们需要综合各个方面来给出，比如性格、相貌、能力、财富等等。代码质量高低也是一个综合各种因素得到的结论。
	我们并不能通过单一的维度去评价一段代码写的好坏。比如，即使一段代码的可扩展性很好，但可读性很差，那我们也不能说这段代码质量高。
	
	
	最常用的评价标准有哪几个？
	
		可维护性
		
			落实到编码开发，所谓的“维护”无外乎就是修改 bug、修改老的代码、添加新的代码之类的工作。
			所谓“代码易维护”就是指，在不破坏原有代码设计、不引入新的 bug 的情况下，能够快速地修改或者添加代码。
			所谓“代码不易维护”就是指，修改或者添加代码需要冒着极大的引入新 bug 的风险，并且需要花费很长的时间才能完成。
			
			如何判断可维护性的好与坏
				代码的可读性好、简洁、可扩展性好，就会使得代码易维护；相反，就会使得代码不易维护。
				更细化地讲，如果代码分层清晰、模块化好、高内聚低耦合、遵从基于接口而非实现编程的设计原则等等，那就可能意味着代码易维护。
				除此之外，代码的易维护性还跟项目代码量的多少、业务的复杂程度、利用到的技术的复杂程度、文档是否全面、团队成员的开发水平等诸多因素有关。
				
				如果 bug 容易修复，修改、添加功能能够轻松完成，那我们就可以主观地认为代码对我们来说易维护。
				相反，如果修改一个 bug，修改、添加一个功能，需要花费很长的时间，那我们就可以主观地认为代码对我们来说不易维护。
				
				是否易维护本来就是针对维护的人来说的。不同水平的人对于同一份代码的维护能力并不是相同的。
				对于同样一个系统，熟悉它的资深工程师会觉得代码的可维护性还不错，而一些新人因为不熟悉代码，
				修改 bug、修改添加代码要花费很长的时间，就有可能会觉得代码的可维护性不那么好。
				这实际上也印证了我们之前的观点：代码质量的评价有很强的主观性。
				
		
		可读性
			
			Any fool can write code that a computer can understand. Good programmers write code that humans can understand.
			毕竟，不管是修改 bug，还是修改添加功能代码，我们首先要做的事情就是读懂代码。代码读不大懂，就很有可能因为考虑不周全，而引入新的 bug。
			
			代码是否符合编码规范、命名是否达意、注释是否详尽、函数是否长短合适、模块划分是否清晰、是否符合高内聚低耦合等等。
			你应该也能感觉到，从正面上，我们很难给出一个覆盖所有评价指标的列表。这也是我们无法量化可读性的原因。
			
			
		
		可扩展性
		
			代码的可扩展性表示，我们在不修改或少量修改原有代码的情况下，通过扩展的方式添加新的功能代码。
			说直白点就是，代码预留了一些功能扩展点，你可以把新功能代码，直接插到扩展点上，而不需要因为要添加一个功能而大动干戈，改动大量的原始代码。
			
			对修改关闭，对扩展开放
			
		灵活性
		
			当我们添加一个新的功能代码的时候，原有的代码已经预留好了扩展点，我们不需要修改原有的代码，只要在扩展点上添加新的代码即可。这个时候，我们除了可以说代码易扩展，还可以说代码写得好灵活。
			
			当我们要实现一个功能的时候，发现原有代码中，已经抽象出了很多底层可以复用的模块、类等代码，我们可以拿来直接使用。这个时候，我们除了可以说代码易复用之外，还可以说代码写得好灵活。
			
			当我们使用某组接口的时候，如果这组接口可以应对各种使用场景，满足各种不同的需求，我们除了可以说接口易用之外，还可以说这个接口设计得好灵活或者代码写得好灵活。
			
			从刚刚举的场景来看，如果一段代码易扩展、易复用或者易用，我们都可以称这段代码写得比较灵活。所以，灵活这个词的含义非常宽泛，很多场景下都可以使用。
		
		简洁性（简单、复杂）
			
			Keep It Simple，Stupid
			
			思从深而行从简，真正的高手能云淡风轻地用最简单的方法解决最复杂的问题。这也是一个编程老手跟编程新手的本质区别之一。
			
	
		可复用性
		
			尽量减少重复代码的编写，复用已有的代码。在后面的很多章节中，我们都会经常提到“可复用性”这一代码评价标准
			
			Don’t Repeat Yourself
			
		
		可测试性
		
			这一点也非常重要
			
		
如何写出高质量的代码，也就等同于在问，如何写出易维护、易读、易扩展、灵活、简洁、可复用、可测试的代码。	


要写出高质量代码，我们就需要掌握一些更加细化、更加能落地的编程方法论，这就包含面向对象设计思想、设计原则、设计模式、编码规范、重构技巧等等，	

讨论和补充：
	命名规范
	注释清楚
	机器运行效率
	方法长度，代码行数
	好的代码千篇一律，不好的代码花样百出
	


	